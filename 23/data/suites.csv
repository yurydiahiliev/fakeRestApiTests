"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify that invalid author IDs return 400 Bad Request","282","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 17:52:24 UTC 2025","passed","Tue Oct 07 17:52:25 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Create a book with emoji and unicode characters","277","checkCreateBookWithEmojiAndUnicode(SoftAssertions)","","Tue Oct 07 17:52:40 UTC 2025","passed","Tue Oct 07 17:52:40 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify updating an existing book successfully changes its fields and returns 200 OK","540","checkUpdateExistingBookShouldReturnOk(SoftAssertions)","","Tue Oct 07 17:52:54 UTC 2025","passed","Tue Oct 07 17:52:55 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturnOk"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","32","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 17:52:52 UTC 2025","passed","Tue Oct 07 17:52:52 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify creating author with only one populated field behaves as expected","306","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 17:52:19 UTC 2025","passed","Tue Oct 07 17:52:19 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that creating author with special characters in names is accepted","318","checkCreateAuthorWithSpecialCharacters(SoftAssertions)","","Tue Oct 07 17:52:18 UTC 2025","passed","Tue Oct 07 17:52:18 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","729","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 17:52:34 UTC 2025","failed","Tue Oct 07 17:52:34 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","293","checkGetBookByRandomIdShouldReturnValidBookById(SoftAssertions)","","Tue Oct 07 17:52:54 UTC 2025","passed","Tue Oct 07 17:52:54 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"Verify creating author with only one populated field behaves as expected","286","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 17:52:19 UTC 2025","passed","Tue Oct 07 17:52:20 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that a user can create a book with all required fields and they are correctly returned","293","checkUserCanCreateBookWithAllFields(SoftAssertions)","","Tue Oct 07 17:52:40 UTC 2025","passed","Tue Oct 07 17:52:41 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Create a book with numeric-only title and description","269","checkCreateBookWithNumericStrings(SoftAssertions)","","Tue Oct 07 17:52:44 UTC 2025","passed","Tue Oct 07 17:52:44 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"Verify that sending POST /Books without a request body returns 400 Bad Request","314","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 17:52:44 UTC 2025","passed","Tue Oct 07 17:52:45 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","798","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 17:52:34 UTC 2025","failed","Tue Oct 07 17:52:35 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","307","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 17:52:26 UTC 2025","failed","Tue Oct 07 17:52:27 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","295","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 17:52:29 UTC 2025","passed","Tue Oct 07 17:52:29 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that invalid book IDs return 400 Bad Request","270","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 17:52:46 UTC 2025","passed","Tue Oct 07 17:52:46 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that user can create an author with minimal valid data","304","checkUserCanCreateAuthorWithMinimalData(SoftAssertions)","","Tue Oct 07 17:52:18 UTC 2025","passed","Tue Oct 07 17:52:19 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Verify that invalid author IDs return 400 Bad Request","280","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 17:52:24 UTC 2025","passed","Tue Oct 07 17:52:24 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify all Author IDs are unique","4","checkAuthorIdsAreUnique()","","Tue Oct 07 17:52:28 UTC 2025","passed","Tue Oct 07 17:52:28 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","299","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 17:52:27 UTC 2025","passed","Tue Oct 07 17:52:27 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","296","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 17:52:51 UTC 2025","passed","Tue Oct 07 17:52:51 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","263","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 17:52:42 UTC 2025","passed","Tue Oct 07 17:52:42 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Authors returns non-empty list and all fields are valid","791","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 17:52:31 UTC 2025","passed","Tue Oct 07 17:52:32 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","319","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 17:52:51 UTC 2025","passed","Tue Oct 07 17:52:52 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","340","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 17:52:28 UTC 2025","passed","Tue Oct 07 17:52:29 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","835","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 17:52:22 UTC 2025","failed","Tue Oct 07 17:52:23 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","288","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 17:52:52 UTC 2025","passed","Tue Oct 07 17:52:52 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify author IDs are in sequential order","10","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 17:52:32 UTC 2025","passed","Tue Oct 07 17:52:32 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Create a book with special characters in all string fields","286","checkCreateBookWithSpecialSymbols(SoftAssertions)","","Tue Oct 07 17:52:43 UTC 2025","passed","Tue Oct 07 17:52:43 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"PUT /Authors/{id} with non-numeric path should return 400","279","checkShouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 17:52:39 UTC 2025","passed","Tue Oct 07 17:52:40 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn400WhenPathIsNonNumeric"
"Verify deleting a non-existent book returns 404 Not Found","262","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 17:52:48 UTC 2025","failed","Tue Oct 07 17:52:48 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","277","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 17:52:25 UTC 2025","passed","Tue Oct 07 17:52:25 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"Verify that invalid book IDs return 400 Bad Request","300","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 17:52:45 UTC 2025","passed","Tue Oct 07 17:52:46 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","281","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 17:52:48 UTC 2025","passed","Tue Oct 07 17:52:48 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"Verify that invalid book IDs return 400 Bad Request","278","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 17:52:45 UTC 2025","passed","Tue Oct 07 17:52:45 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","274","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 17:52:41 UTC 2025","passed","Tue Oct 07 17:52:41 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating a book with empty strings returns 400 Bad Request","575","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 17:52:57 UTC 2025","passed","Tue Oct 07 17:52:58 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","299","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 17:52:45 UTC 2025","passed","Tue Oct 07 17:52:45 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","289","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 17:52:20 UTC 2025","passed","Tue Oct 07 17:52:20 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that creating a book with empty all fields returns 400 Bad Request","302","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 17:52:42 UTC 2025","passed","Tue Oct 07 17:52:43 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify GET /Authors/{id} returns correct author by valid ID","346","checkGetAuthorByIdShouldReturnCorrectAuthor(SoftAssertions)","","Tue Oct 07 17:52:32 UTC 2025","passed","Tue Oct 07 17:52:32 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify that creating a book with identical data twice is allowed and both return the same book data","561","checkUserCanCreateBookWithSameDataTwice(SoftAssertions)","","Tue Oct 07 17:52:43 UTC 2025","passed","Tue Oct 07 17:52:44 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify PUT /Authors/{id} updates an existing author successfully","792","shouldUpdateExistingAuthor(SoftAssertions)","","Tue Oct 07 17:52:33 UTC 2025","passed","Tue Oct 07 17:52:34 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldUpdateExistingAuthor"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","837","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 17:52:30 UTC 2025","passed","Tue Oct 07 17:52:30 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","279","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 17:52:24 UTC 2025","passed","Tue Oct 07 17:52:24 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","704","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 17:52:39 UTC 2025","failed","Tue Oct 07 17:52:39 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify double deletion returns 404 for the second call","824","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 17:52:23 UTC 2025","failed","Tue Oct 07 17:52:23 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"Verify creating a Book with only one populated field behaves as expected","276","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 17:52:41 UTC 2025","passed","Tue Oct 07 17:52:41 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that all book IDs are unique across the list","1","checkReturnedBookIdsAreUnique()","","Tue Oct 07 17:52:50 UTC 2025","passed","Tue Oct 07 17:52:50 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","433","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 17:52:28 UTC 2025","passed","Tue Oct 07 17:52:28 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","264","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 17:52:41 UTC 2025","passed","Tue Oct 07 17:52:41 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify creating a Book with only one populated field behaves as expected","268","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 17:52:42 UTC 2025","passed","Tue Oct 07 17:52:42 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating a non-existent book returns 404 Not Found","272","checkUpdateNonExistentBookShouldReturnNotFound()","","Tue Oct 07 17:52:58 UTC 2025","failed","Tue Oct 07 17:52:58 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturnNotFound"
"Verify that invalid author IDs return 400 Bad Request","291","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 17:52:25 UTC 2025","passed","Tue Oct 07 17:52:25 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","742","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 17:52:36 UTC 2025","failed","Tue Oct 07 17:52:37 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","268","checkUserCanCreateBookWithEmptyFieldsExceptDate(SoftAssertions)","","Tue Oct 07 17:52:44 UTC 2025","passed","Tue Oct 07 17:52:44 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Verify that books are returned in sequential order by ID","68","checkBooksReturnedInSequentialOrder(SoftAssertions)","","Tue Oct 07 17:52:53 UTC 2025","passed","Tue Oct 07 17:52:53 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"PUT /Authors/{id} should return 400 when firstName is blank","765","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 17:52:35 UTC 2025","failed","Tue Oct 07 17:52:36 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Create a book with a title that includes mixed characters","276","checkCreateBookWithMixedCharacters(SoftAssertions)","","Tue Oct 07 17:52:44 UTC 2025","passed","Tue Oct 07 17:52:44 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"Verify that user can create an author with all required valid fields","4382","checkUserCanCreateAuthorWithAllFields(SoftAssertions)","","Tue Oct 07 17:52:13 UTC 2025","passed","Tue Oct 07 17:52:18 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify creating a Book with only one populated field behaves as expected","265","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 17:52:41 UTC 2025","passed","Tue Oct 07 17:52:42 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","1613","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 17:52:55 UTC 2025","passed","Tue Oct 07 17:52:57 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify GET /Books returns non-empty list and valid fields","654","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 17:52:53 UTC 2025","passed","Tue Oct 07 17:52:54 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","1340","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 17:52:47 UTC 2025","passed","Tue Oct 07 17:52:48 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify updating a book without a request body returns 400 Bad Request","6","checkUpdateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 17:52:57 UTC 2025","broken","Tue Oct 07 17:52:57 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","322","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 17:52:51 UTC 2025","passed","Tue Oct 07 17:52:51 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify updating a book with null fields returns 400 Bad Request","549","checkUpdateBookWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 17:52:57 UTC 2025","failed","Tue Oct 07 17:52:57 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","275","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 17:52:26 UTC 2025","failed","Tue Oct 07 17:52:26 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","306","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 17:52:28 UTC 2025","passed","Tue Oct 07 17:52:28 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","309","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 17:52:52 UTC 2025","passed","Tue Oct 07 17:52:52 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that creating an author with empty fields returns 400 Bad Request","293","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 17:52:19 UTC 2025","failed","Tue Oct 07 17:52:19 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","720","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 17:52:53 UTC 2025","passed","Tue Oct 07 17:52:53 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"PUT /Authors/{id} should return 400 when lastName is blank","731","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 17:52:38 UTC 2025","failed","Tue Oct 07 17:52:39 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify double deletion returns 404 for the second call","803","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 17:52:48 UTC 2025","failed","Tue Oct 07 17:52:49 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","459","checkCreateBookWithPastPublishDate(SoftAssertions)","","Tue Oct 07 17:52:40 UTC 2025","passed","Tue Oct 07 17:52:40 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","729","checkCreateDuplicateAuthorIsAllowed(SoftAssertions)","","Tue Oct 07 17:52:21 UTC 2025","passed","Tue Oct 07 17:52:21 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","325","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 17:52:27 UTC 2025","passed","Tue Oct 07 17:52:28 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify that POST /Authors without body returns 400 Bad Request","890","checkCreateAuthorWithoutBodyShouldReturnBadRequest(SoftAssertions)","","Tue Oct 07 17:52:20 UTC 2025","passed","Tue Oct 07 17:52:21 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","297","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 17:52:23 UTC 2025","passed","Tue Oct 07 17:52:24 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 404 when author does not exist","283","shouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 17:52:37 UTC 2025","failed","Tue Oct 07 17:52:37 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn404WhenUpdatingNonExistingAuthor"
"Verify that creating an author with null fields returns 400 Bad Request","306","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 17:52:18 UTC 2025","failed","Tue Oct 07 17:52:18 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","451","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 17:52:52 UTC 2025","passed","Tue Oct 07 17:52:53 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","306","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/9999999 → should return 404 for nonexistent book ID","","Tue Oct 07 17:52:27 UTC 2025","failed","Tue Oct 07 17:52:27 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","294","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 17:52:50 UTC 2025","passed","Tue Oct 07 17:52:51 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","507","checkGetAuthorsByBookIdShouldReturnRelatedAuthors(SoftAssertions)","","Tue Oct 07 17:52:30 UTC 2025","passed","Tue Oct 07 17:52:31 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"PUT /Authors/{id} should return 400 when lastName is blank","854","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 17:52:37 UTC 2025","failed","Tue Oct 07 17:52:38 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that invalid book IDs return 400 Bad Request","280","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 17:52:46 UTC 2025","passed","Tue Oct 07 17:52:46 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that creating a book with empty fields returns sucess","268","checkUserCanCreateBookWithNullFields(SoftAssertions)","","Tue Oct 07 17:52:42 UTC 2025","passed","Tue Oct 07 17:52:42 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"GET /Books/{id} should return the correct book for an existing ID","547","checkGetBookByIdShouldReturnValidBook(SoftAssertions)","","Tue Oct 07 17:52:50 UTC 2025","failed","Tue Oct 07 17:52:50 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","830","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 17:52:32 UTC 2025","failed","Tue Oct 07 17:52:33 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Verify deleting a non-existent author returns 404 Not Found","301","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 17:52:21 UTC 2025","failed","Tue Oct 07 17:52:22 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify each author has a valid first and last name pattern","15","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 17:52:30 UTC 2025","passed","Tue Oct 07 17:52:30 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","558","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 17:52:29 UTC 2025","passed","Tue Oct 07 17:52:29 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that invalid book IDs return 400 Bad Request","286","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 17:52:46 UTC 2025","passed","Tue Oct 07 17:52:47 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
