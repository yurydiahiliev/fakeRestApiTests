{"uid":"64f4de3cbc88014","name":"checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","fullName":"com.fakeRestApi.tests.author.DeleteAuthorsTests.checkDeleteInvalidAuthorIdShouldReturnBadRequest","historyId":"5156c344959a44d74cbff8d723cf4649","time":{"start":1759859544540,"stop":1759859544819,"duration":279},"description":"Verify that invalid author IDs return 400 Bad Request","descriptionHtml":"<p>Verify that invalid author IDs return 400 Bad Request</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759859541986,"stop":1759859541988,"duration":2},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759859541986,"stop":1759859541988,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759859544540,"stop":1759859544541,"duration":1},"status":"passed","steps":[{"name":"Start test","time":{"start":1759859544540,"stop":1759859544541,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'DELETE /Authors/$ should return 400 Bad Request', tags = [], testClass = class com.fakeRestApi.tests.author.DeleteAuthorsTests, testMethod = void com.fakeRestApi.tests.author.DeleteAuthorsTests.checkDeleteInvalidAuthorIdShouldReturnBadRequest(java.lang.String)]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify that invalid author IDs return 400 Bad Request","status":"passed","steps":[],"attachments":[{"uid":"27be63fa13630964","name":"Request","source":"27be63fa13630964.html","type":"text/html","size":546},{"uid":"baf12815e05c7b36","name":"HTTP/1.1 400 Bad Request","source":"baf12815e05c7b36.html","type":"text/html","size":760}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759859544819,"stop":1759859544819,"duration":0},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759859544819,"stop":1759859544819,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'DELETE /Authors/$ should return 400 Bad Request', tags = [], testClass = class com.fakeRestApi.tests.author.DeleteAuthorsTests, testMethod = void com.fakeRestApi.tests.author.DeleteAuthorsTests.checkDeleteInvalidAuthorIdShouldReturnBadRequest(java.lang.String)]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759859545678,"stop":1759859545678,"duration":0},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759859545678,"stop":1759859545678,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.DeleteAuthorsTests]/[test-template:checkDeleteInvalidAuthorIdShouldReturnBadRequest(java.lang.String)]/[test-template-invocation:#3]"},{"name":"feature","value":"Authors API"},{"name":"story","value":"Delete Authors"},{"name":"epic","value":"Fake REST API tests"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"3042@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.DeleteAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.DeleteAuthorsTests"},{"name":"testMethod","value":"checkDeleteInvalidAuthorIdShouldReturnBadRequest"},{"name":"suite","value":"com.fakeRestApi.tests.author.DeleteAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"arg0","value":"$"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":4},"items":[{"uid":"17a54a69d311ba3c","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/22/#testresult/17a54a69d311ba3c","status":"passed","time":{"start":1759859124727,"stop":1759859125213,"duration":486}},{"uid":"27d1de306abcddca","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/21/#testresult/27d1de306abcddca","status":"passed","time":{"start":1759858704414,"stop":1759858704716,"duration":302}},{"uid":"7156e27368f2855b","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/7156e27368f2855b","status":"passed","time":{"start":1759852916161,"stop":1759852916634,"duration":473}}]},"tags":[]},"source":"64f4de3cbc88014.json","parameterValues":["$"]}