{"uid":"21559a1972cf0c02","name":"checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","fullName":"com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest","historyId":"23fe5682cb66301c7a798f4fe2dc6be8","time":{"start":1759859539128,"stop":1759859539421,"duration":293},"description":"Verify that creating an author with empty fields returns 400 Bad Request","descriptionHtml":"<p>Verify that creating an author with empty fields returns 400 Bad Request</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest(CreateAuthorsTests.java:92)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759859532901,"stop":1759859533699,"duration":798},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759859532916,"stop":1759859533698,"duration":782},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759859539129,"stop":1759859539129,"duration":0},"status":"passed","steps":[{"name":"Start test","time":{"start":1759859539129,"stop":1759859539129,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify that creating an author with empty fields returns 400 Bad Request","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest(CreateAuthorsTests.java:92)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"f16d3c6e614bef94","name":"Request","source":"f16d3c6e614bef94.html","type":"text/html","size":899},{"uid":"e2982e8116ff0a49","name":"HTTP/1.1 200 OK","source":"e2982e8116ff0a49.html","type":"text/html","size":524}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759859539419,"stop":1759859539420,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759859539419,"stop":1759859539420,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759859541980,"stop":1759859541981,"duration":1},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759859541980,"stop":1759859541981,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.CreateAuthorsTests]/[method:checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()]"},{"name":"story","value":"Create Authors"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"3042@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testMethod","value":"checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"},{"name":"suite","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"e345414aa04e4d0a","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/22/#testresult/e345414aa04e4d0a","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859116004,"stop":1759859116554,"duration":550}},{"uid":"6e25d952682d2ce5","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/21/#testresult/6e25d952682d2ce5","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759858698655,"stop":1759858698960,"duration":305}},{"uid":"1a9f76bb0dfe5fd4","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/1a9f76bb0dfe5fd4","status":"failed","statusDetails":"[200 Status Code not equal to - 400] \nexpected: 400\n but was: 200","time":{"start":1759852907705,"stop":1759852908178,"duration":473}},{"uid":"14ff570b78b76401","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/19/#testresult/14ff570b78b76401","status":"failed","statusDetails":"[Expected 400 Bad Request for invalid empty fields] \nexpected: 400\n but was: 200","time":{"start":1759838428757,"stop":1759838429104,"duration":347}},{"uid":"dfc7d354c4116754","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/18/#testresult/dfc7d354c4116754","status":"failed","statusDetails":"[Expected 400 Bad Request for invalid empty fields] \nexpected: 400\n but was: 200","time":{"start":1759838377048,"stop":1759838377508,"duration":460}},{"uid":"37c2552f2d739804","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/17/#testresult/37c2552f2d739804","status":"failed","statusDetails":"[Expected 400 Bad Request for invalid empty fields] \nexpected: 400\n but was: 200","time":{"start":1759838225262,"stop":1759838225626,"duration":364}},{"uid":"8a2a5ff2167114bd","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/16/#testresult/8a2a5ff2167114bd","status":"failed","statusDetails":"[Expected 400 Bad Request for invalid empty fields] \nexpected: 400\n but was: 200","time":{"start":1759837984239,"stop":1759837984549,"duration":310}},{"uid":"e6d9dda694817b93","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/15/#testresult/e6d9dda694817b93","status":"failed","statusDetails":"[Expected 400 Bad Request for invalid empty fields] \nexpected: 400\n but was: 200","time":{"start":1759837719357,"stop":1759837719666,"duration":309}},{"uid":"14ce9718efc1ddf0","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/14/#testresult/14ce9718efc1ddf0","status":"failed","statusDetails":"[Expected 400 Bad Request for invalid empty fields] \nexpected: 400\n but was: 200","time":{"start":1759835544002,"stop":1759835545028,"duration":1026}}]},"tags":[]},"source":"21559a1972cf0c02.json","parameterValues":[]}