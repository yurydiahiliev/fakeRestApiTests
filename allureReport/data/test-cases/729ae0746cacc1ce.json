{"uid":"729ae0746cacc1ce","name":"checkShouldReturnBadRequestOnIdMismatch()","fullName":"com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch","historyId":"77a537eb855ce2f1fab7d5a32a17dcc3","time":{"start":1759834886623,"stop":1759834887525,"duration":902},"description":"PUT /Authors/{id} should return 400 when body ID mismatches path ID","descriptionHtml":"<p>PUT /Authors/{id} should return 400 when body ID mismatches path ID</p>\n","status":"failed","statusMessage":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch(UpdateAuthorsTests.java:155)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759834886622,"stop":1759834886623,"duration":1},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759834886622,"stop":1759834886623,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759834886624,"stop":1759834886624,"duration":0},"status":"passed","steps":[{"name":"Start test","time":{"start":1759834886624,"stop":1759834886624,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestOnIdMismatch()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch()]"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"PUT /Authors/{id} should return 400 when body ID mismatches path ID","status":"failed","statusMessage":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch(UpdateAuthorsTests.java:155)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"84ffab2515d87cb9","name":"Request","source":"84ffab2515d87cb9.html","type":"text/html","size":532},{"uid":"5cc0b24abd1f91e0","name":"HTTP/1.1 200 OK","source":"5cc0b24abd1f91e0.html","type":"text/html","size":109198},{"uid":"2dc99c08815d8e58","name":"Request","source":"2dc99c08815d8e58.html","type":"text/html","size":929},{"uid":"22a7be8b203629fc","name":"HTTP/1.1 200 OK","source":"22a7be8b203629fc.html","type":"text/html","size":538}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759834887524,"stop":1759834887524,"duration":0},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759834887524,"stop":1759834887524,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestOnIdMismatch()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch()]"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759834893942,"stop":1759834893943,"duration":1},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759834893943,"stop":1759834893943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.UpdateAuthorsTests]/[method:checkShouldReturnBadRequestOnIdMismatch()]"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"story","value":"Update Authors"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2414@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testMethod","value":"checkShouldReturnBadRequestOnIdMismatch"},{"name":"suite","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"729ae0746cacc1ce.json","parameterValues":[]}