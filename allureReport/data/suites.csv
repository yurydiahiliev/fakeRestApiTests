"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Tue Oct 07 11:01:45 UTC 2025","Tue Oct 07 11:01:45 UTC 2025","317","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","Verify GET /Books/{id} returns 400 Bad Request when ID is invalid"
"passed","Tue Oct 07 11:01:25 UTC 2025","Tue Oct 07 11:01:25 UTC 2025","7","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending","checkAuthorsAreSortedByIdAscending()","Verify author IDs are in sequential order"
"passed","Tue Oct 07 11:01:20 UTC 2025","Tue Oct 07 11:01:21 UTC 2025","279","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/null should return 400 Bad Request","Verify that invalid author IDs return 400 Bad Request"
"failed","Tue Oct 07 11:01:50 UTC 2025","Tue Oct 07 11:01:50 UTC 2025","538","","com.fakeRestApi.tests.book.UpdateBooksTests","","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturn400","checkUpdateBookWithNullFieldsShouldReturn400()","Verify updating a book with null fields returns 400 Bad Request"
"passed","Tue Oct 07 11:01:35 UTC 2025","Tue Oct 07 11:01:35 UTC 2025","296","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField","checkCreateBookWithSingleField(String) Create Book with only field: description","Verify creating a Book with only one populated field behaves as expected"
"passed","Tue Oct 07 11:01:23 UTC 2025","Tue Oct 07 11:01:23 UTC 2025","17","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern","checkAuthorNamesHaveValidPattern()","Verify each author has a valid first and last name pattern"
"passed","Tue Oct 07 11:01:23 UTC 2025","Tue Oct 07 11:01:23 UTC 2025","321","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors","checkGetAuthorsByBookIdShouldReturnRelatedAuthors()","Verify GET /Authors/authors/books/{idBook} returns authors related to that book"
"passed","Tue Oct 07 11:01:35 UTC 2025","Tue Oct 07 11:01:36 UTC 2025","276","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","Verify creating a Book with only one populated field behaves as expected"
"passed","Tue Oct 07 11:01:41 UTC 2025","Tue Oct 07 11:01:41 UTC 2025","273","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/abc should return 400 Bad Request","Verify that invalid book IDs return 400 Bad Request"
"failed","Tue Oct 07 11:01:22 UTC 2025","Tue Oct 07 11:01:22 UTC 2025","299","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books"
"passed","Tue Oct 07 11:01:48 UTC 2025","Tue Oct 07 11:01:48 UTC 2025","6","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder","checkBooksReturnedInSequentialOrder()","Verify that books are returned in sequential order by ID"
"passed","Tue Oct 07 11:01:36 UTC 2025","Tue Oct 07 11:01:36 UTC 2025","271","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields","checkUserCanCreateBookWithNullFields()","Verify that creating a book with empty fields returns sucess"
"failed","Tue Oct 07 11:01:28 UTC 2025","Tue Oct 07 11:01:29 UTC 2025","741","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid","checkShouldReturnBadRequestWhenIdBookInvalid()","PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)"
"passed","Tue Oct 07 11:01:46 UTC 2025","Tue Oct 07 11:01:46 UTC 2025","293","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","Verify GET /Books/{id} returns 400 Bad Request when ID is invalid"
"passed","Tue Oct 07 11:01:19 UTC 2025","Tue Oct 07 11:01:20 UTC 2025","285","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/abc should return 400 Bad Request","Verify that invalid author IDs return 400 Bad Request"
"failed","Tue Oct 07 11:01:30 UTC 2025","Tue Oct 07 11:01:31 UTC 2025","679","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","PUT /Authors/{id} should return 400 when firstName is blank"
"passed","Tue Oct 07 11:01:45 UTC 2025","Tue Oct 07 11:01:45 UTC 2025","2","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique","checkReturnedBookIdsAreUnique()","Verify that all book IDs are unique across the list"
"passed","Tue Oct 07 11:01:20 UTC 2025","Tue Oct 07 11:01:20 UTC 2025","293","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/ю should return 400 Bad Request","Verify that invalid author IDs return 400 Bad Request"
"failed","Tue Oct 07 11:01:32 UTC 2025","Tue Oct 07 11:01:33 UTC 2025","686","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","PUT /Authors/{id} should return 400 when lastName is blank"
"passed","Tue Oct 07 11:01:20 UTC 2025","Tue Oct 07 11:01:20 UTC 2025","289","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/$ should return 400 Bad Request","Verify that invalid author IDs return 400 Bad Request"
"passed","Tue Oct 07 11:01:36 UTC 2025","Tue Oct 07 11:01:36 UTC 2025","277","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","Verify creating a Book with only one populated field behaves as expected"
"passed","Tue Oct 07 11:01:23 UTC 2025","Tue Oct 07 11:01:23 UTC 2025","4","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique","checkAuthorIdsAreUnique()","Verify all Author IDs are unique"
"failed","Tue Oct 07 11:01:22 UTC 2025","Tue Oct 07 11:01:23 UTC 2025","293","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/999999 → should return 404 for nonexistent book ID","Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books"
"passed","Tue Oct 07 11:01:26 UTC 2025","Tue Oct 07 11:01:26 UTC 2025","297","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/999999 → should return 404 Not Found","Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs"
"passed","Tue Oct 07 11:01:38 UTC 2025","Tue Oct 07 11:01:38 UTC 2025","269","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings","checkCreateBookWithNumericStrings()","Create a book with numeric-only title and description"
"passed","Tue Oct 07 11:01:47 UTC 2025","Tue Oct 07 11:01:48 UTC 2025","570","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs"
"passed","Tue Oct 07 11:01:16 UTC 2025","Tue Oct 07 11:01:17 UTC 2025","953","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturn400","checkCreateAuthorWithoutBodyShouldReturn400()","Verify that POST /Authors without body returns 400 Bad Request"
"failed","Tue Oct 07 11:01:14 UTC 2025","Tue Oct 07 11:01:15 UTC 2025","291","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","Verify that creating an author with empty fields returns 400 Bad Request"
"passed","Tue Oct 07 11:01:24 UTC 2025","Tue Oct 07 11:01:25 UTC 2025","282","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/ю → should return 400 Bad Request","Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs"
"failed","Tue Oct 07 11:01:43 UTC 2025","Tue Oct 07 11:01:43 UTC 2025","810","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","Verify double deletion returns 404 for the second call"
"passed","Tue Oct 07 11:01:15 UTC 2025","Tue Oct 07 11:01:15 UTC 2025","289","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","Verify creating author with only one populated field behaves as expected"
"passed","Tue Oct 07 11:01:39 UTC 2025","Tue Oct 07 11:01:39 UTC 2025","318","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error"
"passed","Tue Oct 07 11:01:34 UTC 2025","Tue Oct 07 11:01:35 UTC 2025","267","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField","checkCreateBookWithSingleField(String) Create Book with only field: id","Verify creating a Book with only one populated field behaves as expected"
"passed","Tue Oct 07 11:01:52 UTC 2025","Tue Oct 07 11:01:52 UTC 2025","567","","com.fakeRestApi.tests.book.UpdateBooksTests","","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400","checkUpdateBookWithEmptyFieldsShouldReturn400()","Verify updating a book with empty strings returns 400 Bad Request"
"failed","Tue Oct 07 11:01:42 UTC 2025","Tue Oct 07 11:01:42 UTC 2025","266","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound","checkDeleteNonexistentBookShouldReturnNotFound()","Verify deleting a non-existent book returns 404 Not Found"
"failed","Tue Oct 07 11:01:29 UTC 2025","Tue Oct 07 11:01:30 UTC 2025","669","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","PUT /Authors/{id} should return 400 when firstName is blank"
"passed","Tue Oct 07 11:01:38 UTC 2025","Tue Oct 07 11:01:38 UTC 2025","272","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters","checkCreateBookWithMixedCharacters()","Create a book with a title that includes mixed characters"
"failed","Tue Oct 07 11:01:17 UTC 2025","Tue Oct 07 11:01:18 UTC 2025","314","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound","checkDeleteNonexistentAuthorShouldReturnNotFound()","Verify deleting a non-existent author returns 404 Not Found"
"passed","Tue Oct 07 11:01:14 UTC 2025","Tue Oct 07 11:01:14 UTC 2025","325","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData","checkUserCanCreateAuthorWithMinimalData()","Verify that user can create an author with minimal valid data"
"passed","Tue Oct 07 11:01:38 UTC 2025","Tue Oct 07 11:01:39 UTC 2025","309","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest","checkCreateBookWithoutBodyShouldReturnBadRequest()","Verify that sending POST /Books without a request body returns 400 Bad Request"
"passed","Tue Oct 07 11:01:42 UTC 2025","Tue Oct 07 11:01:42 UTC 2025","287","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/$ should return 400 Bad Request","Verify that invalid book IDs return 400 Bad Request"
"passed","Tue Oct 07 11:01:23 UTC 2025","Tue Oct 07 11:01:24 UTC 2025","289","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/abc → should return 400 Bad Request","Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs"
"passed","Tue Oct 07 11:01:46 UTC 2025","Tue Oct 07 11:01:47 UTC 2025","305","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","Verify GET /Books/{id} returns 400 Bad Request when ID is invalid"
"passed","Tue Oct 07 11:01:53 UTC 2025","Tue Oct 07 11:01:54 UTC 2025","286","","com.fakeRestApi.tests.book.UpdateBooksTests","","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturn400","checkUpdateBookWithoutBodyShouldReturn400()","Verify updating a book without a request body returns 400 Bad Request"
"passed","Tue Oct 07 11:01:38 UTC 2025","Tue Oct 07 11:01:38 UTC 2025","269","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate","checkUserCanCreateBookWithEmptyFieldsExceptDate()","Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request"
"failed","Tue Oct 07 11:01:44 UTC 2025","Tue Oct 07 11:01:45 UTC 2025","898","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook","checkGetBookByIdShouldReturnValidBook()","GET /Books/{id} should return the correct book for an existing ID"
"passed","Tue Oct 07 11:01:41 UTC 2025","Tue Oct 07 11:01:41 UTC 2025","294","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/ю should return 400 Bad Request","Verify that invalid book IDs return 400 Bad Request"
"passed","Tue Oct 07 11:01:37 UTC 2025","Tue Oct 07 11:01:38 UTC 2025","539","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice","checkUserCanCreateBookWithSameDataTwice()","Verify that creating a book with identical data twice is allowed and both return the same book data"
"passed","Tue Oct 07 11:01:33 UTC 2025","Tue Oct 07 11:01:34 UTC 2025","446","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate","checkCreateBookWithPastPublishDate()","Verify that creating a book with a past publish date is allowed and the date is stored correctly"
"passed","Tue Oct 07 11:01:25 UTC 2025","Tue Oct 07 11:01:25 UTC 2025","284","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/null → should return 400 Bad Request","Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs"
"failed","Tue Oct 07 11:01:18 UTC 2025","Tue Oct 07 11:01:19 UTC 2025","819","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","Verify double deletion returns 404 for the second call"
"failed","Tue Oct 07 11:01:29 UTC 2025","Tue Oct 07 11:01:29 UTC 2025","738","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","PUT /Authors/{id} should return 400 when firstName is blank"
"passed","Tue Oct 07 11:01:37 UTC 2025","Tue Oct 07 11:01:37 UTC 2025","272","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols","checkCreateBookWithSpecialSymbols()","Create a book with special characters in all string fields"
"failed","Tue Oct 07 11:01:52 UTC 2025","Tue Oct 07 11:01:53 UTC 2025","267","","com.fakeRestApi.tests.book.UpdateBooksTests","","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturn404","checkUpdateNonExistentBookShouldReturn404()","Verify updating a non-existent book returns 404 Not Found"
"failed","Tue Oct 07 11:01:31 UTC 2025","Tue Oct 07 11:01:31 UTC 2025","271","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn404WhenUpdatingNonExistingAuthor","shouldReturn404WhenUpdatingNonExistingAuthor()","PUT /Authors/{id} should return 404 when author does not exist"
"passed","Tue Oct 07 11:01:41 UTC 2025","Tue Oct 07 11:01:41 UTC 2025","304","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/! should return 400 Bad Request","Verify that invalid book IDs return 400 Bad Request"
"passed","Tue Oct 07 11:01:47 UTC 2025","Tue Oct 07 11:01:47 UTC 2025","26","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing","checkBooksPublishDateIsChronologicallyDecreasing()","Verify that each next book has an earlier publish date than the previous one (newest to oldest order)"
"passed","Tue Oct 07 11:01:33 UTC 2025","Tue Oct 07 11:01:33 UTC 2025","274","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn400WhenPathIsNonNumeric","shouldReturn400WhenPathIsNonNumeric()","PUT /Authors/{id} with non-numeric path should return 400"
"passed","Tue Oct 07 11:01:50 UTC 2025","Tue Oct 07 11:01:52 UTC 2025","1612","","com.fakeRestApi.tests.book.UpdateBooksTests","","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually","checkUpdateBookSingleFieldsIndividually()","Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)"
"passed","Tue Oct 07 11:01:36 UTC 2025","Tue Oct 07 11:01:37 UTC 2025","310","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields","checkUserCanCreateBookWithEmptyFields()","Verify that creating a book with empty all fields returns 400 Bad Request"
"passed","Tue Oct 07 11:01:10 UTC 2025","Tue Oct 07 11:01:13 UTC 2025","2917","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields","checkUserCanCreateAuthorWithAllFields()","Verify that user can create an author with all required valid fields"
"passed","Tue Oct 07 11:01:25 UTC 2025","Tue Oct 07 11:01:26 UTC 2025","302","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/0 → should return 404 Not Found","Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs"
"passed","Tue Oct 07 11:01:49 UTC 2025","Tue Oct 07 11:01:50 UTC 2025","568","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById","checkGetBookByRandomIdShouldReturnValidBookById()","Verify GET /Books/{id} returns the correct book when using a valid random ID"
"passed","Tue Oct 07 11:01:47 UTC 2025","Tue Oct 07 11:01:47 UTC 2025","615","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs"
"passed","Tue Oct 07 11:01:53 UTC 2025","Tue Oct 07 11:01:53 UTC 2025","529","","com.fakeRestApi.tests.book.UpdateBooksTests","","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturn200","checkUpdateExistingBookShouldReturn200()","Verify updating an existing book successfully changes its fields and returns 200 OK"
"passed","Tue Oct 07 11:01:27 UTC 2025","Tue Oct 07 11:01:28 UTC 2025","896","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldUpdateExistingAuthor","shouldUpdateExistingAuthor()","Verify PUT /Authors/{id} updates an existing author successfully"
"passed","Tue Oct 07 11:01:39 UTC 2025","Tue Oct 07 11:01:41 UTC 2025","1655","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found"
"passed","Tue Oct 07 11:01:26 UTC 2025","Tue Oct 07 11:01:26 UTC 2025","305","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/-5 → should return 404 Not Found","Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs"
"passed","Tue Oct 07 11:01:48 UTC 2025","Tue Oct 07 11:01:48 UTC 2025","475","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs"
"passed","Tue Oct 07 11:01:13 UTC 2025","Tue Oct 07 11:01:14 UTC 2025","317","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters","checkCreateAuthorWithSpecialCharacters()","Verify that creating author with special characters in names is accepted"
"passed","Tue Oct 07 11:01:45 UTC 2025","Tue Oct 07 11:01:46 UTC 2025","290","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","Verify GET /Books/{id} returns 400 Bad Request when ID is invalid"
"failed","Tue Oct 07 11:01:14 UTC 2025","Tue Oct 07 11:01:14 UTC 2025","387","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","Verify that creating an author with null fields returns 400 Bad Request"
"passed","Tue Oct 07 11:01:23 UTC 2025","Tue Oct 07 11:01:23 UTC 2025","573","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList","checkGetAllAuthorsShouldReturnValidList()","Verify GET /Authors returns non-empty list and all fields are valid"
"failed","Tue Oct 07 11:01:18 UTC 2025","Tue Oct 07 11:01:18 UTC 2025","862","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found"
"passed","Tue Oct 07 11:01:25 UTC 2025","Tue Oct 07 11:01:25 UTC 2025","293","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor","checkGetAuthorByIdShouldReturnCorrectAuthor()","Verify GET /Authors/{id} returns correct author by valid ID"
"broken","Tue Oct 07 11:01:42 UTC 2025","Tue Oct 07 11:01:43 UTC 2025","287","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405","checkDeleteWithoutIdShouldReturn405()","Verify DELETE /Books without specifying ID returns 405 Method Not Allowed"
"passed","Tue Oct 07 11:01:36 UTC 2025","Tue Oct 07 11:01:36 UTC 2025","269","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","Verify creating a Book with only one populated field behaves as expected"
"failed","Tue Oct 07 11:01:26 UTC 2025","Tue Oct 07 11:01:27 UTC 2025","902","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch","checkShouldReturnBadRequestOnIdMismatch()","PUT /Authors/{id} should return 400 when body ID mismatches path ID"
"passed","Tue Oct 07 11:01:24 UTC 2025","Tue Oct 07 11:01:24 UTC 2025","294","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/! → should return 400 Bad Request","Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs"
"passed","Tue Oct 07 11:01:48 UTC 2025","Tue Oct 07 11:01:49 UTC 2025","867","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList","checkGetAllBooksShouldReturnValidBooksList()","Verify GET /Books returns non-empty list and valid fields"
"passed","Tue Oct 07 11:01:34 UTC 2025","Tue Oct 07 11:01:34 UTC 2025","275","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields","checkUserCanCreateBookWithAllFields()","Verify that a user can create a book with all required fields and they are correctly returned"
"passed","Tue Oct 07 11:01:15 UTC 2025","Tue Oct 07 11:01:15 UTC 2025","282","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","Verify creating author with only one populated field behaves as expected"
"failed","Tue Oct 07 11:01:31 UTC 2025","Tue Oct 07 11:01:32 UTC 2025","727","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","PUT /Authors/{id} should return 400 when lastName is blank"
"passed","Tue Oct 07 11:01:16 UTC 2025","Tue Oct 07 11:01:16 UTC 2025","611","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed","checkCreateDuplicateAuthorIsAllowed()","Verify that creating duplicate authors is allowed and returns same data (fake API behavior)"
"passed","Tue Oct 07 11:01:20 UTC 2025","Tue Oct 07 11:01:20 UTC 2025","279","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/! should return 400 Bad Request","Verify that invalid author IDs return 400 Bad Request"
"passed","Tue Oct 07 11:01:15 UTC 2025","Tue Oct 07 11:01:16 UTC 2025","309","","com.fakeRestApi.tests.author.CreateAuthorsTests","","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","Verify creating author with only one populated field behaves as expected"
"failed","Tue Oct 07 11:01:32 UTC 2025","Tue Oct 07 11:01:32 UTC 2025","710","","com.fakeRestApi.tests.author.UpdateAuthorsTests","","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","PUT /Authors/{id} should return 400 when lastName is blank"
"passed","Tue Oct 07 11:01:35 UTC 2025","Tue Oct 07 11:01:35 UTC 2025","280","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField","checkCreateBookWithSingleField(String) Create Book with only field: title","Verify creating a Book with only one populated field behaves as expected"
"failed","Tue Oct 07 11:01:22 UTC 2025","Tue Oct 07 11:01:22 UTC 2025","314","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books"
"passed","Tue Oct 07 11:01:34 UTC 2025","Tue Oct 07 11:01:34 UTC 2025","272","","com.fakeRestApi.tests.book.CreateBooksTests","","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode","checkCreateBookWithEmojiAndUnicode()","Create a book with emoji and unicode characters"
"broken","Tue Oct 07 11:01:21 UTC 2025","Tue Oct 07 11:01:21 UTC 2025","277","","com.fakeRestApi.tests.author.DeleteAuthorsTests","","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405","checkDeleteWithoutIdShouldReturn405()","Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed"
"passed","Tue Oct 07 11:01:24 UTC 2025","Tue Oct 07 11:01:24 UTC 2025","274","","com.fakeRestApi.tests.author.GetAuthorsTests","","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/$ → should return 400 Bad Request","Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs"
"passed","Tue Oct 07 11:01:46 UTC 2025","Tue Oct 07 11:01:46 UTC 2025","286","","com.fakeRestApi.tests.book.GetBooksApiTests","","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","Verify GET /Books/{id} returns 400 Bad Request when ID is invalid"
"passed","Tue Oct 07 11:01:42 UTC 2025","Tue Oct 07 11:01:42 UTC 2025","283","","com.fakeRestApi.tests.book.DeleteBooksTests","","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/null should return 400 Bad Request","Verify that invalid book IDs return 400 Bad Request"
