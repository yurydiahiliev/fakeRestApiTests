{"uid":"df3dc8ff3023be6a","name":"checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","fullName":"com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest","historyId":"23fe5682cb66301c7a798f4fe2dc6be8","time":{"start":1759868038198,"stop":1759868038626,"duration":428},"description":"Verify that creating an author with empty fields returns 400 Bad Request","descriptionHtml":"<p>Verify that creating an author with empty fields returns 400 Bad Request</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest(CreateAuthorsTests.java:92)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759868031023,"stop":1759868031892,"duration":869},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759868031042,"stop":1759868031891,"duration":849},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759868038199,"stop":1759868038200,"duration":1},"status":"passed","steps":[{"name":"Start test","time":{"start":1759868038200,"stop":1759868038200,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify that creating an author with empty fields returns 400 Bad Request","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest(CreateAuthorsTests.java:92)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"c2fd65b67a111f1b","name":"Request","source":"c2fd65b67a111f1b.html","type":"text/html","size":899},{"uid":"b0fa5c9c0f123321","name":"HTTP/1.1 200 OK","source":"b0fa5c9c0f123321.html","type":"text/html","size":524}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759868038624,"stop":1759868038625,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759868038624,"stop":1759868038625,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759868041997,"stop":1759868041999,"duration":2},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759868041997,"stop":1759868041999,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.CreateAuthorsTests]/[method:checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()]"},{"name":"story","value":"Create Authors"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2942@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testMethod","value":"checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"},{"name":"suite","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"df3dc8ff3023be6a.json","parameterValues":[]}