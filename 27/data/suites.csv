"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify that invalid author IDs return 400 Bad Request","417","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 20:14:05 UTC 2025","passed","Tue Oct 07 20:14:06 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","1227","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 20:14:36 UTC 2025","passed","Tue Oct 07 20:14:37 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","414","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 20:14:08 UTC 2025","failed","Tue Oct 07 20:14:08 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify all Author IDs are unique","5","checkAuthorIdsAreUnique()","","Tue Oct 07 20:14:11 UTC 2025","passed","Tue Oct 07 20:14:11 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify GET /Authors returns non-empty list and all fields are valid","1019","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 20:14:14 UTC 2025","passed","Tue Oct 07 20:14:15 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify deleting a non-existent author returns 404 Not Found","452","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 20:14:02 UTC 2025","failed","Tue Oct 07 20:14:02 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify that invalid book IDs return 400 Bad Request","399","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 20:14:35 UTC 2025","passed","Tue Oct 07 20:14:35 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","436","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 20:14:08 UTC 2025","failed","Tue Oct 07 20:14:09 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Create a book with a title that includes mixed characters","391","checkCreateBookWithMixedCharacters(SoftAssertions)","","Tue Oct 07 20:14:32 UTC 2025","passed","Tue Oct 07 20:14:33 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"Verify that invalid book IDs return 400 Bad Request","409","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 20:14:34 UTC 2025","passed","Tue Oct 07 20:14:34 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify updating a book with null fields returns 400 Bad Request","808","checkUpdateBookWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 20:14:52 UTC 2025","failed","Tue Oct 07 20:14:52 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturnBadRequest"
"Verify that all book IDs are unique across the list","3","checkReturnedBookIdsAreUnique()","","Tue Oct 07 20:14:41 UTC 2025","passed","Tue Oct 07 20:14:41 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify that creating a book with identical data twice is allowed and both return the same book data","814","checkUserCanCreateBookWithSameDataTwice(SoftAssertions)","","Tue Oct 07 20:14:31 UTC 2025","passed","Tue Oct 07 20:14:32 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify that invalid book IDs return 400 Bad Request","412","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 20:14:35 UTC 2025","passed","Tue Oct 07 20:14:36 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that books are returned in sequential order by ID","81","checkBooksReturnedInSequentialOrder(SoftAssertions)","","Tue Oct 07 20:14:46 UTC 2025","passed","Tue Oct 07 20:14:46 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Verify updating a book with empty strings returns 400 Bad Request","807","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 20:14:52 UTC 2025","passed","Tue Oct 07 20:14:53 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"PUT /Authors/{id} with non-numeric path should return 400","407","checkShouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 20:14:25 UTC 2025","passed","Tue Oct 07 20:14:26 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn400WhenPathIsNonNumeric"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","998","checkCreateDuplicateAuthorIsAllowed(SoftAssertions)","","Tue Oct 07 20:14:00 UTC 2025","passed","Tue Oct 07 20:14:01 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","441","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 20:14:11 UTC 2025","passed","Tue Oct 07 20:14:11 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify updating a book without a request body returns 400 Bad Request","5","checkUpdateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 20:14:52 UTC 2025","broken","Tue Oct 07 20:14:52 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","1038","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 20:14:22 UTC 2025","failed","Tue Oct 07 20:14:23 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating a book with empty all fields returns 400 Bad Request","431","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 20:14:30 UTC 2025","passed","Tue Oct 07 20:14:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","651","checkGetAuthorsByBookIdShouldReturnRelatedAuthors(SoftAssertions)","","Tue Oct 07 20:14:13 UTC 2025","passed","Tue Oct 07 20:14:14 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"PUT /Authors/{id} should return 400 when firstName is blank","1119","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 20:14:19 UTC 2025","failed","Tue Oct 07 20:14:20 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","451","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 20:14:09 UTC 2025","passed","Tue Oct 07 20:14:10 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","28","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 20:14:43 UTC 2025","passed","Tue Oct 07 20:14:43 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","629","checkCreateBookWithPastPublishDate(SoftAssertions)","","Tue Oct 07 20:14:26 UTC 2025","passed","Tue Oct 07 20:14:26 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Verify updating a non-existent book returns 404 Not Found","409","checkUpdateNonExistentBookShouldReturnNotFound()","","Tue Oct 07 20:14:53 UTC 2025","failed","Tue Oct 07 20:14:54 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturnNotFound"
"Verify that invalid author IDs return 400 Bad Request","414","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 20:14:05 UTC 2025","passed","Tue Oct 07 20:14:05 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","411","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 20:14:04 UTC 2025","passed","Tue Oct 07 20:14:05 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","451","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 20:14:11 UTC 2025","passed","Tue Oct 07 20:14:11 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","441","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 20:14:12 UTC 2025","passed","Tue Oct 07 20:14:13 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify double deletion returns 404 for the second call","1235","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 20:14:03 UTC 2025","failed","Tue Oct 07 20:14:04 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"Verify that creating a book with empty fields returns sucess","400","checkUserCanCreateBookWithNullFields(SoftAssertions)","","Tue Oct 07 20:14:29 UTC 2025","passed","Tue Oct 07 20:14:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify creating a Book with only one populated field behaves as expected","393","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 20:14:29 UTC 2025","passed","Tue Oct 07 20:14:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that a user can create a book with all required fields and they are correctly returned","417","checkUserCanCreateBookWithAllFields(SoftAssertions)","","Tue Oct 07 20:14:27 UTC 2025","passed","Tue Oct 07 20:14:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","396","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 20:14:07 UTC 2025","passed","Tue Oct 07 20:14:07 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"Verify that invalid author IDs return 400 Bad Request","440","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 20:14:06 UTC 2025","passed","Tue Oct 07 20:14:06 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"GET /Books/{id} should return the correct book for an existing ID","1140","checkGetBookByIdShouldReturnValidBook(SoftAssertions)","","Tue Oct 07 20:14:40 UTC 2025","failed","Tue Oct 07 20:14:41 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","431","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 20:14:42 UTC 2025","passed","Tue Oct 07 20:14:43 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","1071","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 20:14:16 UTC 2025","failed","Tue Oct 07 20:14:18 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","798","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 20:14:46 UTC 2025","passed","Tue Oct 07 20:14:46 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify creating a Book with only one populated field behaves as expected","402","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 20:14:28 UTC 2025","passed","Tue Oct 07 20:14:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Create a book with emoji and unicode characters","429","checkCreateBookWithEmojiAndUnicode(SoftAssertions)","","Tue Oct 07 20:14:26 UTC 2025","passed","Tue Oct 07 20:14:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify creating a Book with only one populated field behaves as expected","407","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 20:14:28 UTC 2025","passed","Tue Oct 07 20:14:28 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","2422","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 20:14:49 UTC 2025","passed","Tue Oct 07 20:14:52 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify updating an existing book successfully changes its fields and returns 200 OK","815","checkUpdateExistingBookShouldReturnOk(SoftAssertions)","","Tue Oct 07 20:14:48 UTC 2025","passed","Tue Oct 07 20:14:49 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturnOk"
"Verify creating a Book with only one populated field behaves as expected","408","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 20:14:27 UTC 2025","passed","Tue Oct 07 20:14:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify creating author with only one populated field behaves as expected","424","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 20:13:59 UTC 2025","passed","Tue Oct 07 20:13:59 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","1081","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 20:14:15 UTC 2025","failed","Tue Oct 07 20:14:16 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Verify GET /Books returns non-empty list and valid fields","1130","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 20:14:46 UTC 2025","passed","Tue Oct 07 20:14:48 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify creating author with only one populated field behaves as expected","427","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 20:13:58 UTC 2025","passed","Tue Oct 07 20:13:59 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"PUT /Authors/{id} should return 400 when firstName is blank","1062","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 20:14:18 UTC 2025","failed","Tue Oct 07 20:14:19 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","389","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 20:14:37 UTC 2025","passed","Tue Oct 07 20:14:38 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"PUT /Authors/{id} should return 400 when lastName is blank","1080","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 20:14:23 UTC 2025","failed","Tue Oct 07 20:14:24 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating an author with empty fields returns 400 Bad Request","428","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 20:13:58 UTC 2025","failed","Tue Oct 07 20:13:58 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify double deletion returns 404 for the second call","1196","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 20:14:38 UTC 2025","failed","Tue Oct 07 20:14:39 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","459","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 20:14:10 UTC 2025","passed","Tue Oct 07 20:14:10 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify each author has a valid first and last name pattern","23","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 20:14:13 UTC 2025","passed","Tue Oct 07 20:14:13 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify that user can create an author with all required valid fields","4839","checkUserCanCreateAuthorWithAllFields(SoftAssertions)","","Tue Oct 07 20:13:51 UTC 2025","passed","Tue Oct 07 20:13:56 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify GET /Authors/{id} returns correct author by valid ID","410","checkGetAuthorByIdShouldReturnCorrectAuthor(SoftAssertions)","","Tue Oct 07 20:14:15 UTC 2025","passed","Tue Oct 07 20:14:15 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify creating a Book with only one populated field behaves as expected","412","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 20:14:27 UTC 2025","passed","Tue Oct 07 20:14:28 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","523","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 20:14:42 UTC 2025","passed","Tue Oct 07 20:14:42 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","409","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 20:14:29 UTC 2025","passed","Tue Oct 07 20:14:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that sending POST /Books without a request body returns 400 Bad Request","454","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 20:14:33 UTC 2025","passed","Tue Oct 07 20:14:33 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","432","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 20:13:59 UTC 2025","passed","Tue Oct 07 20:13:59 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"PUT /Authors/{id} should return 400 when firstName is blank","1096","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 20:14:20 UTC 2025","failed","Tue Oct 07 20:14:21 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","440","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 20:14:10 UTC 2025","passed","Tue Oct 07 20:14:11 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","713","checkGetBookByRandomIdShouldReturnValidBookById(SoftAssertions)","","Tue Oct 07 20:14:48 UTC 2025","passed","Tue Oct 07 20:14:48 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"PUT /Authors/{id} should return 404 when author does not exist","392","checkShouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 20:14:16 UTC 2025","failed","Tue Oct 07 20:14:16 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn404WhenUpdatingNonExistingAuthor"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","1241","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 20:14:02 UTC 2025","failed","Tue Oct 07 20:14:03 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify PUT /Authors/{id} updates an existing author successfully","1056","checkShouldUpdateExistingAuthor(SoftAssertions)","","Tue Oct 07 20:14:24 UTC 2025","passed","Tue Oct 07 20:14:25 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldUpdateExistingAuthor"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","432","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 20:14:43 UTC 2025","passed","Tue Oct 07 20:14:43 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that user can create an author with minimal valid data","441","checkUserCanCreateAuthorWithMinimalData(SoftAssertions)","","Tue Oct 07 20:13:57 UTC 2025","passed","Tue Oct 07 20:13:58 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Verify that creating an author with null fields returns 400 Bad Request","447","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 20:13:57 UTC 2025","failed","Tue Oct 07 20:13:57 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","459","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 20:14:12 UTC 2025","passed","Tue Oct 07 20:14:12 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","425","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 20:14:43 UTC 2025","passed","Tue Oct 07 20:14:43 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","433","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 20:14:11 UTC 2025","passed","Tue Oct 07 20:14:12 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Create a book with numeric-only title and description","397","checkCreateBookWithNumericStrings(SoftAssertions)","","Tue Oct 07 20:14:32 UTC 2025","passed","Tue Oct 07 20:14:32 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"PUT /Authors/{id} should return 400 when lastName is blank","1095","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 20:14:21 UTC 2025","failed","Tue Oct 07 20:14:22 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating author with special characters in names is accepted","443","checkCreateAuthorWithSpecialCharacters(SoftAssertions)","","Tue Oct 07 20:13:56 UTC 2025","passed","Tue Oct 07 20:13:57 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify author IDs are in sequential order","8","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 20:14:15 UTC 2025","passed","Tue Oct 07 20:14:15 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify that invalid book IDs return 400 Bad Request","399","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 20:14:34 UTC 2025","passed","Tue Oct 07 20:14:34 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","401","checkUserCanCreateBookWithEmptyFieldsExceptDate(SoftAssertions)","","Tue Oct 07 20:14:32 UTC 2025","passed","Tue Oct 07 20:14:32 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","1307","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 20:14:43 UTC 2025","passed","Tue Oct 07 20:14:45 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that invalid book IDs return 400 Bad Request","413","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 20:14:34 UTC 2025","passed","Tue Oct 07 20:14:35 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Create a book with special characters in all string fields","421","checkCreateBookWithSpecialSymbols(SoftAssertions)","","Tue Oct 07 20:14:30 UTC 2025","passed","Tue Oct 07 20:14:31 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","402","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/9999999 → should return 404 for nonexistent book ID","","Tue Oct 07 20:14:09 UTC 2025","failed","Tue Oct 07 20:14:09 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","751","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 20:14:45 UTC 2025","passed","Tue Oct 07 20:14:46 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","443","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 20:14:33 UTC 2025","passed","Tue Oct 07 20:14:34 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify that POST /Authors without body returns 400 Bad Request","1044","checkCreateAuthorWithoutBodyShouldReturnBadRequest(SoftAssertions)","","Tue Oct 07 20:13:59 UTC 2025","passed","Tue Oct 07 20:14:00 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","437","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 20:14:41 UTC 2025","passed","Tue Oct 07 20:14:42 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","416","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 20:14:06 UTC 2025","passed","Tue Oct 07 20:14:07 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify deleting a non-existent book returns 404 Not Found","389","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 20:14:37 UTC 2025","failed","Tue Oct 07 20:14:37 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
