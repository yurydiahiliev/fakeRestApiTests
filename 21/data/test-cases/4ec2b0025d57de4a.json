{"uid":"4ec2b0025d57de4a","name":"checkShouldReturnBadRequestOnIdMismatch()","fullName":"com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch","historyId":"77a537eb855ce2f1fab7d5a32a17dcc3","time":{"start":1759858712858,"stop":1759858713754,"duration":896},"description":"PUT /Authors/{id} should return 400 when body ID mismatches path ID","descriptionHtml":"<p>PUT /Authors/{id} should return 400 when body ID mismatches path ID</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch(UpdateAuthorsTests.java:133)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759858712856,"stop":1759858712857,"duration":1},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759858712856,"stop":1759858712857,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759858712858,"stop":1759858712859,"duration":1},"status":"passed","steps":[{"name":"Start test","time":{"start":1759858712858,"stop":1759858712859,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestOnIdMismatch()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"PUT /Authors/{id} should return 400 when body ID mismatches path ID","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch(UpdateAuthorsTests.java:133)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"528eb5288ed39188","name":"Request","source":"528eb5288ed39188.html","type":"text/html","size":532},{"uid":"fb50dc31ca809150","name":"HTTP/1.1 200 OK","source":"fb50dc31ca809150.html","type":"text/html","size":115822},{"uid":"4ca34775bae40fee","name":"Request","source":"4ca34775bae40fee.html","type":"text/html","size":929},{"uid":"e9a8f220fe511e5b","name":"HTTP/1.1 200 OK","source":"e9a8f220fe511e5b.html","type":"text/html","size":538}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759858713752,"stop":1759858713753,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759858713753,"stop":1759858713753,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestOnIdMismatch()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759858720818,"stop":1759858720818,"duration":0},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759858720818,"stop":1759858720818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.UpdateAuthorsTests]/[method:checkShouldReturnBadRequestOnIdMismatch()]"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"story","value":"Update Authors"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2820@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testMethod","value":"checkShouldReturnBadRequestOnIdMismatch"},{"name":"suite","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"8ac4583f4a57a4f4","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/8ac4583f4a57a4f4","status":"failed","statusDetails":"[200 Status Code not equal to - 400] \nexpected: 400\n but was: 200","time":{"start":1759852927453,"stop":1759852928722,"duration":1269}},{"uid":"5c617ea88cada768","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/19/#testresult/5c617ea88cada768","status":"failed","statusDetails":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759838443068,"stop":1759838444023,"duration":955}},{"uid":"44f658d52755b187","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/18/#testresult/44f658d52755b187","status":"failed","statusDetails":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759838395278,"stop":1759838396418,"duration":1140}},{"uid":"a6ffdf29aae8287e","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/17/#testresult/a6ffdf29aae8287e","status":"failed","statusDetails":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759838240638,"stop":1759838241532,"duration":894}},{"uid":"1bb3a1454dd630ae","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/16/#testresult/1bb3a1454dd630ae","status":"failed","statusDetails":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759837996046,"stop":1759837996783,"duration":737}},{"uid":"a8cf98606fa31c81","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/15/#testresult/a8cf98606fa31c81","status":"failed","statusDetails":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759837731322,"stop":1759837732080,"duration":758}},{"uid":"ca22b82e7eb7b0a","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/14/#testresult/ca22b82e7eb7b0a","status":"failed","statusDetails":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759835560466,"stop":1759835561218,"duration":752}}]},"tags":[]},"source":"4ec2b0025d57de4a.json","parameterValues":[]}