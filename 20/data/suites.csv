"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","783","checkGetBookByRandomIdShouldReturnValidBookById()","","Tue Oct 07 16:02:54 UTC 2025","passed","Tue Oct 07 16:02:55 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","455","checkUserCanCreateBookWithEmptyFieldsExceptDate(SoftAssertions)","","Tue Oct 07 16:02:36 UTC 2025","passed","Tue Oct 07 16:02:36 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","486","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 16:02:38 UTC 2025","passed","Tue Oct 07 16:02:38 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","528","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 16:02:48 UTC 2025","passed","Tue Oct 07 16:02:49 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 404 when author does not exist","483","shouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 16:02:23 UTC 2025","failed","Tue Oct 07 16:02:23 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn404WhenUpdatingNonExistingAuthor"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","1602","checkCreateBookWithPastPublishDate(SoftAssertions)","","Tue Oct 07 16:02:28 UTC 2025","passed","Tue Oct 07 16:02:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Create a book with special characters in all string fields","465","checkCreateBookWithSpecialSymbols(SoftAssertions)","","Tue Oct 07 16:02:34 UTC 2025","passed","Tue Oct 07 16:02:35 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"Create a book with a title that includes mixed characters","455","checkCreateBookWithMixedCharacters(SoftAssertions)","","Tue Oct 07 16:02:37 UTC 2025","passed","Tue Oct 07 16:02:37 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"PUT /Authors/{id} should return 400 when lastName is blank","1304","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 16:02:25 UTC 2025","failed","Tue Oct 07 16:02:26 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"PUT /Authors/{id} with non-numeric path should return 400","473","checkShouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 16:02:27 UTC 2025","passed","Tue Oct 07 16:02:28 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn400WhenPathIsNonNumeric"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","519","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 16:02:00 UTC 2025","passed","Tue Oct 07 16:02:01 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify updating an existing book successfully changes its fields and returns 200 OK","914","checkUpdateExistingBookShouldReturnOk()","","Tue Oct 07 16:02:55 UTC 2025","passed","Tue Oct 07 16:02:56 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturnOk"
"PUT /Authors/{id} should return 400 when firstName is blank","3181","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 16:02:19 UTC 2025","failed","Tue Oct 07 16:02:23 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","1439","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 16:01:52 UTC 2025","failed","Tue Oct 07 16:01:53 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify GET /Authors returns non-empty list and all fields are valid","1363","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 16:02:05 UTC 2025","passed","Tue Oct 07 16:02:06 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","2095","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 16:02:41 UTC 2025","passed","Tue Oct 07 16:02:43 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"PUT /Authors/{id} should return 400 when firstName is blank","4424","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 16:02:15 UTC 2025","failed","Tue Oct 07 16:02:19 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that invalid book IDs return 400 Bad Request","478","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 16:02:39 UTC 2025","passed","Tue Oct 07 16:02:40 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","919","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 16:02:52 UTC 2025","passed","Tue Oct 07 16:02:53 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","457","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 16:01:57 UTC 2025","passed","Tue Oct 07 16:01:58 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","505","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 16:02:03 UTC 2025","passed","Tue Oct 07 16:02:03 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that invalid book IDs return 400 Bad Request","500","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 16:02:40 UTC 2025","passed","Tue Oct 07 16:02:40 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","499","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 16:02:03 UTC 2025","passed","Tue Oct 07 16:02:04 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","497","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 16:01:49 UTC 2025","passed","Tue Oct 07 16:01:49 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","488","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 16:01:59 UTC 2025","failed","Tue Oct 07 16:01:59 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","3410","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 16:02:12 UTC 2025","failed","Tue Oct 07 16:02:15 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that user can create an author with all required valid fields","2771","checkUserCanCreateAuthorWithAllFields()","","Tue Oct 07 16:01:43 UTC 2025","passed","Tue Oct 07 16:01:46 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify double deletion returns 404 for the second call","1373","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 16:02:44 UTC 2025","failed","Tue Oct 07 16:02:45 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"Verify updating a book without a request body returns 400 Bad Request","483","checkUpdateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 16:02:59 UTC 2025","passed","Tue Oct 07 16:02:59 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturnBadRequest"
"Verify all Author IDs are unique","3","checkAuthorIdsAreUnique()","","Tue Oct 07 16:02:02 UTC 2025","passed","Tue Oct 07 16:02:02 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify that invalid book IDs return 400 Bad Request","475","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 16:02:39 UTC 2025","passed","Tue Oct 07 16:02:39 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","497","checkGetAuthorsByBookIdShouldReturnRelatedAuthors()","","Tue Oct 07 16:02:04 UTC 2025","passed","Tue Oct 07 16:02:05 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","1722","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 16:02:10 UTC 2025","failed","Tue Oct 07 16:02:12 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"Verify creating a Book with only one populated field behaves as expected","491","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 16:02:32 UTC 2025","passed","Tue Oct 07 16:02:33 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that invalid author IDs return 400 Bad Request","482","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 16:01:57 UTC 2025","passed","Tue Oct 07 16:01:57 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that user can create an author with minimal valid data","482","checkUserCanCreateAuthorWithMinimalData()","","Tue Oct 07 16:01:47 UTC 2025","passed","Tue Oct 07 16:01:47 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","980","checkCreateDuplicateAuthorIsAllowed()","","Tue Oct 07 16:01:50 UTC 2025","passed","Tue Oct 07 16:01:51 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify that invalid book IDs return 400 Bad Request","459","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 16:02:38 UTC 2025","passed","Tue Oct 07 16:02:39 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","499","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 16:02:50 UTC 2025","passed","Tue Oct 07 16:02:50 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that creating a book with empty all fields returns 400 Bad Request","473","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 16:02:34 UTC 2025","passed","Tue Oct 07 16:02:34 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","548","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 16:02:01 UTC 2025","passed","Tue Oct 07 16:02:01 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify that books are returned in sequential order by ID","4","checkBooksReturnedInSequentialOrder()","","Tue Oct 07 16:02:53 UTC 2025","passed","Tue Oct 07 16:02:53 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Verify that invalid book IDs return 400 Bad Request","477","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 16:02:40 UTC 2025","passed","Tue Oct 07 16:02:41 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","2797","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 16:02:56 UTC 2025","passed","Tue Oct 07 16:02:59 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify deleting a non-existent author returns 404 Not Found","498","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 16:01:51 UTC 2025","failed","Tue Oct 07 16:01:52 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","513","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 16:02:50 UTC 2025","passed","Tue Oct 07 16:02:51 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","23","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 16:02:50 UTC 2025","passed","Tue Oct 07 16:02:50 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify each author has a valid first and last name pattern","15","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 16:02:04 UTC 2025","passed","Tue Oct 07 16:02:04 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify that invalid author IDs return 400 Bad Request","476","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 16:01:55 UTC 2025","passed","Tue Oct 07 16:01:55 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that a user can create a book with all required fields and they are correctly returned","459","checkUserCanCreateBookWithAllFields(SoftAssertions)","","Tue Oct 07 16:02:30 UTC 2025","passed","Tue Oct 07 16:02:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Verify deleting a non-existent book returns 404 Not Found","451","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 16:02:43 UTC 2025","failed","Tue Oct 07 16:02:43 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify that creating a book with empty fields returns sucess","473","checkUserCanCreateBookWithNullFields(SoftAssertions)","","Tue Oct 07 16:02:34 UTC 2025","passed","Tue Oct 07 16:02:34 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify creating author with only one populated field behaves as expected","503","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 16:01:48 UTC 2025","passed","Tue Oct 07 16:01:48 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","481","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 16:02:04 UTC 2025","passed","Tue Oct 07 16:02:04 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","796","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 16:02:51 UTC 2025","passed","Tue Oct 07 16:02:52 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify double deletion returns 404 for the second call","1398","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 16:01:53 UTC 2025","failed","Tue Oct 07 16:01:55 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","487","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 16:02:48 UTC 2025","passed","Tue Oct 07 16:02:48 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","486","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 16:02:30 UTC 2025","passed","Tue Oct 07 16:02:31 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","473","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 16:02:49 UTC 2025","passed","Tue Oct 07 16:02:50 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","507","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 16:02:02 UTC 2025","passed","Tue Oct 07 16:02:02 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that all book IDs are unique across the list","2","checkReturnedBookIdsAreUnique()","","Tue Oct 07 16:02:48 UTC 2025","passed","Tue Oct 07 16:02:48 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify creating author with only one populated field behaves as expected","487","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 16:01:48 UTC 2025","passed","Tue Oct 07 16:01:49 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"PUT /Authors/{id} should return 400 when lastName is blank","1511","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 16:02:23 UTC 2025","failed","Tue Oct 07 16:02:25 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify author IDs are in sequential order","8","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 16:02:07 UTC 2025","passed","Tue Oct 07 16:02:07 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify that POST /Authors without body returns 400 Bad Request","1150","checkCreateAuthorWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 16:01:49 UTC 2025","passed","Tue Oct 07 16:01:50 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","486","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 16:02:31 UTC 2025","passed","Tue Oct 07 16:02:31 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Create a book with emoji and unicode characters","514","checkCreateBookWithEmojiAndUnicode(SoftAssertions)","","Tue Oct 07 16:02:29 UTC 2025","passed","Tue Oct 07 16:02:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify that creating a book with identical data twice is allowed and both return the same book data","1027","checkUserCanCreateBookWithSameDataTwice(SoftAssertions)","","Tue Oct 07 16:02:35 UTC 2025","passed","Tue Oct 07 16:02:36 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify that sending POST /Books without a request body returns 400 Bad Request","488","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 16:02:37 UTC 2025","passed","Tue Oct 07 16:02:38 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","1239","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 16:02:26 UTC 2025","failed","Tue Oct 07 16:02:27 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that invalid author IDs return 400 Bad Request","493","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 16:01:56 UTC 2025","passed","Tue Oct 07 16:01:57 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","470","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 16:02:43 UTC 2025","passed","Tue Oct 07 16:02:44 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","485","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/9999999 → should return 404 for nonexistent book ID","","Tue Oct 07 16:02:00 UTC 2025","failed","Tue Oct 07 16:02:00 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","473","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 16:01:56 UTC 2025","passed","Tue Oct 07 16:01:56 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"GET /Books/{id} should return the correct book for an existing ID","1308","checkGetBookByIdShouldReturnValidBook()","","Tue Oct 07 16:02:46 UTC 2025","failed","Tue Oct 07 16:02:48 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify that creating an author with null fields returns 400 Bad Request","510","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 16:01:46 UTC 2025","failed","Tue Oct 07 16:01:47 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Create a book with numeric-only title and description","483","checkCreateBookWithNumericStrings(SoftAssertions)","","Tue Oct 07 16:02:36 UTC 2025","passed","Tue Oct 07 16:02:37 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","471","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 16:02:02 UTC 2025","passed","Tue Oct 07 16:02:03 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","448","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 16:02:33 UTC 2025","passed","Tue Oct 07 16:02:34 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Authors/{id} returns correct author by valid ID","813","checkGetAuthorByIdShouldReturnCorrectAuthor()","","Tue Oct 07 16:02:06 UTC 2025","passed","Tue Oct 07 16:02:07 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify updating a book with empty strings returns 400 Bad Request","907","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 16:03:00 UTC 2025","passed","Tue Oct 07 16:03:01 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","497","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 16:02:49 UTC 2025","passed","Tue Oct 07 16:02:49 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","1269","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 16:02:07 UTC 2025","failed","Tue Oct 07 16:02:08 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Verify that creating author with special characters in names is accepted","499","checkCreateAuthorWithSpecialCharacters()","","Tue Oct 07 16:01:46 UTC 2025","passed","Tue Oct 07 16:01:46 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify creating a Book with only one populated field behaves as expected","915","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 16:02:31 UTC 2025","passed","Tue Oct 07 16:02:32 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating a book with null fields returns 400 Bad Request","932","checkUpdateBookWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 16:02:59 UTC 2025","failed","Tue Oct 07 16:03:00 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","492","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 16:01:55 UTC 2025","passed","Tue Oct 07 16:01:56 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify updating a non-existent book returns 404 Not Found","458","checkUpdateNonExistentBookShouldReturnNotFound()","","Tue Oct 07 16:03:01 UTC 2025","failed","Tue Oct 07 16:03:02 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturnNotFound"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","495","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 16:01:59 UTC 2025","failed","Tue Oct 07 16:02:00 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify PUT /Authors/{id} updates an existing author successfully","1623","shouldUpdateExistingAuthor()","","Tue Oct 07 16:02:08 UTC 2025","passed","Tue Oct 07 16:02:10 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldUpdateExistingAuthor"
"Verify that creating an author with empty fields returns 400 Bad Request","473","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 16:01:47 UTC 2025","failed","Tue Oct 07 16:01:48 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","561","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 16:02:01 UTC 2025","passed","Tue Oct 07 16:02:02 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","472","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 16:02:33 UTC 2025","passed","Tue Oct 07 16:02:33 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Books returns non-empty list and valid fields","1927","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 16:02:53 UTC 2025","passed","Tue Oct 07 16:02:54 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
