"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify that creating a book with empty fields returns sucess","294","checkUserCanCreateBookWithNullFields()","","Tue Oct 07 11:12:50 UTC 2025","passed","Tue Oct 07 11:12:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","286","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 11:12:36 UTC 2025","passed","Tue Oct 07 11:12:37 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"PUT /Authors/{id} should return 400 when lastName is blank","706","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 11:12:45 UTC 2025","failed","Tue Oct 07 11:12:46 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","735","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 11:12:38 UTC 2025","passed","Tue Oct 07 11:12:39 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404"
"Verify updating an existing book successfully changes its fields and returns 200 OK","543","checkUpdateExistingBookShouldReturn200()","","Tue Oct 07 11:13:07 UTC 2025","passed","Tue Oct 07 11:13:08 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturn200"
"PUT /Authors/{id} should return 400 when firstName is blank","740","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 11:12:43 UTC 2025","failed","Tue Oct 07 11:12:44 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","294","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 11:12:59 UTC 2025","passed","Tue Oct 07 11:12:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","276","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 11:12:49 UTC 2025","passed","Tue Oct 07 11:12:49 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that creating an author with null fields returns 400 Bad Request","3662","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 11:12:18 UTC 2025","failed","Tue Oct 07 11:12:22 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","282","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 11:12:49 UTC 2025","passed","Tue Oct 07 11:12:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating a book without a request body returns 400 Bad Request","295","checkUpdateBookWithoutBodyShouldReturn400()","","Tue Oct 07 11:13:08 UTC 2025","passed","Tue Oct 07 11:13:08 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturn400"
"Create a book with numeric-only title and description","266","checkCreateBookWithNumericStrings()","","Tue Oct 07 11:12:52 UTC 2025","passed","Tue Oct 07 11:12:52 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"Verify author IDs are in sequential order","5","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 11:12:38 UTC 2025","passed","Tue Oct 07 11:12:38 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","1122","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 11:12:53 UTC 2025","passed","Tue Oct 07 11:12:54 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","295","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 11:12:58 UTC 2025","passed","Tue Oct 07 11:12:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","687","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 11:12:45 UTC 2025","failed","Tue Oct 07 11:12:45 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"PUT /Authors/{id} should return 400 when firstName is blank","708","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 11:12:44 UTC 2025","failed","Tue Oct 07 11:12:44 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify updating a book with null fields returns 400 Bad Request","537","checkUpdateBookWithNullFieldsShouldReturn400()","","Tue Oct 07 11:13:03 UTC 2025","failed","Tue Oct 07 11:13:04 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturn400"
"Verify updating a book with empty strings returns 400 Bad Request","560","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 11:13:06 UTC 2025","passed","Tue Oct 07 11:13:07 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","298","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 11:12:36 UTC 2025","passed","Tue Oct 07 11:12:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify creating a Book with only one populated field behaves as expected","273","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 11:12:50 UTC 2025","passed","Tue Oct 07 11:12:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Create a book with special characters in all string fields","282","checkCreateBookWithSpecialSymbols()","","Tue Oct 07 11:12:50 UTC 2025","passed","Tue Oct 07 11:12:51 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","293","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 11:12:59 UTC 2025","passed","Tue Oct 07 11:12:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that a user can create a book with all required fields and they are correctly returned","295","checkUserCanCreateBookWithAllFields()","","Tue Oct 07 11:12:48 UTC 2025","passed","Tue Oct 07 11:12:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","704","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 11:12:41 UTC 2025","failed","Tue Oct 07 11:12:42 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"Verify creating a Book with only one populated field behaves as expected","298","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 11:12:48 UTC 2025","passed","Tue Oct 07 11:12:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","289","checkUserCanCreateBookWithEmptyFieldsExceptDate()","","Tue Oct 07 11:12:51 UTC 2025","passed","Tue Oct 07 11:12:52 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Create a book with a title that includes mixed characters","275","checkCreateBookWithMixedCharacters()","","Tue Oct 07 11:12:52 UTC 2025","passed","Tue Oct 07 11:12:52 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","317","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 11:12:59 UTC 2025","passed","Tue Oct 07 11:13:00 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","279","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 11:12:36 UTC 2025","passed","Tue Oct 07 11:12:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify creating author with only one populated field behaves as expected","894","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 11:12:25 UTC 2025","passed","Tue Oct 07 11:12:25 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify double deletion returns 404 for the second call","799","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 11:12:56 UTC 2025","failed","Tue Oct 07 11:12:57 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"Verify each author has a valid first and last name pattern","19","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 11:12:35 UTC 2025","passed","Tue Oct 07 11:12:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify GET /Authors returns non-empty list and all fields are valid","501","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 11:12:35 UTC 2025","passed","Tue Oct 07 11:12:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify that sending POST /Books without a request body returns 400 Bad Request","302","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 11:12:52 UTC 2025","passed","Tue Oct 07 11:12:52 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","881","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 11:12:30 UTC 2025","failed","Tue Oct 07 11:12:31 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify that invalid author IDs return 400 Bad Request","279","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 11:12:33 UTC 2025","passed","Tue Oct 07 11:12:33 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"Verify creating author with only one populated field behaves as expected","1714","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 11:12:26 UTC 2025","passed","Tue Oct 07 11:12:28 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"PUT /Authors/{id} should return 400 when lastName is blank","712","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 11:12:46 UTC 2025","failed","Tue Oct 07 11:12:47 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify GET /Books returns non-empty list and valid fields","738","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 11:13:02 UTC 2025","passed","Tue Oct 07 11:13:03 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify that user can create an author with minimal valid data","1892","checkUserCanCreateAuthorWithMinimalData()","","Tue Oct 07 11:12:22 UTC 2025","passed","Tue Oct 07 11:12:23 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","318","checkGetAuthorsByBookIdShouldReturnRelatedAuthors()","","Tue Oct 07 11:12:35 UTC 2025","passed","Tue Oct 07 11:12:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"Verify that POST /Authors without body returns 400 Bad Request","921","checkCreateAuthorWithoutBodyShouldReturn400()","","Tue Oct 07 11:12:29 UTC 2025","passed","Tue Oct 07 11:12:30 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturn400"
"Verify deleting a non-existent author returns 404 Not Found","294","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 11:12:30 UTC 2025","failed","Tue Oct 07 11:12:30 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","298","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 11:12:37 UTC 2025","passed","Tue Oct 07 11:12:37 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify that invalid book IDs return 400 Bad Request","280","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 11:12:55 UTC 2025","passed","Tue Oct 07 11:12:55 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify that invalid book IDs return 400 Bad Request","271","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 11:12:54 UTC 2025","passed","Tue Oct 07 11:12:54 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify that invalid author IDs return 400 Bad Request","312","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 11:12:32 UTC 2025","passed","Tue Oct 07 11:12:33 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","470","checkCreateBookWithPastPublishDate()","","Tue Oct 07 11:12:47 UTC 2025","passed","Tue Oct 07 11:12:47 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","315","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/999999 → should return 404 for nonexistent book ID","","Tue Oct 07 11:12:35 UTC 2025","failed","Tue Oct 07 11:12:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404"
"Verify that invalid author IDs return 400 Bad Request","300","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 11:12:32 UTC 2025","passed","Tue Oct 07 11:12:32 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"Verify that creating a book with identical data twice is allowed and both return the same book data","542","checkUserCanCreateBookWithSameDataTwice()","","Tue Oct 07 11:12:51 UTC 2025","passed","Tue Oct 07 11:12:51 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","644","checkCreateDuplicateAuthorIsAllowed()","","Tue Oct 07 11:12:28 UTC 2025","passed","Tue Oct 07 11:12:29 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify PUT /Authors/{id} updates an existing author successfully","722","shouldUpdateExistingAuthor()","","Tue Oct 07 11:12:41 UTC 2025","passed","Tue Oct 07 11:12:41 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldUpdateExistingAuthor"
"Verify that invalid author IDs return 400 Bad Request","290","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 11:12:33 UTC 2025","passed","Tue Oct 07 11:12:33 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"PUT /Authors/{id} should return 400 when firstName is blank","717","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 11:12:42 UTC 2025","failed","Tue Oct 07 11:12:43 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that creating an author with empty fields returns 400 Bad Request","1026","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 11:12:24 UTC 2025","failed","Tue Oct 07 11:12:25 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","942","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 11:12:25 UTC 2025","passed","Tue Oct 07 11:12:26 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Create a book with emoji and unicode characters","275","checkCreateBookWithEmojiAndUnicode()","","Tue Oct 07 11:12:47 UTC 2025","passed","Tue Oct 07 11:12:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify GET /Authors/{id} returns correct author by valid ID","313","checkGetAuthorByIdShouldReturnCorrectAuthor()","","Tue Oct 07 11:12:37 UTC 2025","passed","Tue Oct 07 11:12:38 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify that books are returned in sequential order by ID","8","checkBooksReturnedInSequentialOrder()","","Tue Oct 07 11:13:02 UTC 2025","passed","Tue Oct 07 11:13:02 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","272","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 11:12:33 UTC 2025","broken","Tue Oct 07 11:12:33 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"Verify double deletion returns 404 for the second call","822","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 11:12:31 UTC 2025","failed","Tue Oct 07 11:12:32 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"GET /Books/{id} should return the correct book for an existing ID","931","checkGetBookByIdShouldReturnValidBook()","","Tue Oct 07 11:12:57 UTC 2025","failed","Tue Oct 07 11:12:58 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify creating a Book with only one populated field behaves as expected","289","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 11:12:49 UTC 2025","passed","Tue Oct 07 11:12:49 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"PUT /Authors/{id} should return 404 when author does not exist","279","shouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 11:12:44 UTC 2025","failed","Tue Oct 07 11:12:45 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn404WhenUpdatingNonExistingAuthor"
"Verify that invalid book IDs return 400 Bad Request","280","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 11:12:55 UTC 2025","passed","Tue Oct 07 11:12:55 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","1275","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 11:12:39 UTC 2025","passed","Tue Oct 07 11:12:40 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","492","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 11:13:00 UTC 2025","passed","Tue Oct 07 11:13:00 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify all Author IDs are unique","4","checkAuthorIdsAreUnique()","","Tue Oct 07 11:12:35 UTC 2025","passed","Tue Oct 07 11:12:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","293","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 11:13:00 UTC 2025","passed","Tue Oct 07 11:13:00 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that creating author with special characters in names is accepted","1614","checkCreateAuthorWithSpecialCharacters()","","Tue Oct 07 11:12:16 UTC 2025","passed","Tue Oct 07 11:12:18 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify updating a non-existent book returns 404 Not Found","263","checkUpdateNonExistentBookShouldReturn404()","","Tue Oct 07 11:13:07 UTC 2025","failed","Tue Oct 07 11:13:07 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturn404"
"Verify that invalid book IDs return 400 Bad Request","275","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 11:12:54 UTC 2025","passed","Tue Oct 07 11:12:55 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","280","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 11:12:37 UTC 2025","passed","Tue Oct 07 11:12:37 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","752","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 11:12:40 UTC 2025","failed","Tue Oct 07 11:12:41 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"PUT /Authors/{id} with non-numeric path should return 400","272","shouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 11:12:47 UTC 2025","passed","Tue Oct 07 11:12:47 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn400WhenPathIsNonNumeric"
"Verify that user can create an author with all required valid fields","4689","checkUserCanCreateAuthorWithAllFields()","","Tue Oct 07 11:12:12 UTC 2025","passed","Tue Oct 07 11:12:16 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","308","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 11:12:34 UTC 2025","failed","Tue Oct 07 11:12:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404"
"Verify that creating a book with empty all fields returns 400 Bad Request","333","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 11:12:50 UTC 2025","passed","Tue Oct 07 11:12:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify that invalid author IDs return 400 Bad Request","307","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 11:12:32 UTC 2025","passed","Tue Oct 07 11:12:32 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"Verify that all book IDs are unique across the list","2","checkReturnedBookIdsAreUnique()","","Tue Oct 07 11:12:58 UTC 2025","passed","Tue Oct 07 11:12:58 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","573","checkGetBookByRandomIdShouldReturnValidBookById()","","Tue Oct 07 11:13:03 UTC 2025","passed","Tue Oct 07 11:13:03 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","297","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 11:12:34 UTC 2025","failed","Tue Oct 07 11:12:34 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","559","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 11:13:00 UTC 2025","passed","Tue Oct 07 11:13:01 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","327","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 11:12:38 UTC 2025","passed","Tue Oct 07 11:12:38 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","27","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 11:13:00 UTC 2025","passed","Tue Oct 07 11:13:00 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","924","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 11:13:01 UTC 2025","passed","Tue Oct 07 11:13:02 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify creating a Book with only one populated field behaves as expected","343","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 11:12:48 UTC 2025","passed","Tue Oct 07 11:12:49 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","2512","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 11:13:04 UTC 2025","passed","Tue Oct 07 11:13:06 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","305","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 11:12:52 UTC 2025","passed","Tue Oct 07 11:12:53 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify deleting a non-existent book returns 404 Not Found","283","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 11:12:55 UTC 2025","failed","Tue Oct 07 11:12:56 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","270","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 11:12:56 UTC 2025","broken","Tue Oct 07 11:12:56 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"Verify that invalid book IDs return 400 Bad Request","271","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 11:12:54 UTC 2025","passed","Tue Oct 07 11:12:54 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
