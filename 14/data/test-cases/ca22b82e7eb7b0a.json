{"uid":"ca22b82e7eb7b0a","name":"checkShouldReturnBadRequestOnIdMismatch()","fullName":"com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch","historyId":"77a537eb855ce2f1fab7d5a32a17dcc3","time":{"start":1759835560466,"stop":1759835561218,"duration":752},"description":"PUT /Authors/{id} should return 400 when body ID mismatches path ID","descriptionHtml":"<p>PUT /Authors/{id} should return 400 when body ID mismatches path ID</p>\n","status":"failed","statusMessage":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch(UpdateAuthorsTests.java:155)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759835560464,"stop":1759835560465,"duration":1},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759835560464,"stop":1759835560465,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759835560466,"stop":1759835560467,"duration":1},"status":"passed","steps":[{"name":"Start test","time":{"start":1759835560466,"stop":1759835560467,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestOnIdMismatch()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"PUT /Authors/{id} should return 400 when body ID mismatches path ID","status":"failed","statusMessage":"[ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [ID mismatch should result in 400 Bad Request] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch(UpdateAuthorsTests.java:155)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"4848717d905ee91","name":"Request","source":"4848717d905ee91.html","type":"text/html","size":532},{"uid":"126268a2bc6c311","name":"HTTP/1.1 200 OK","source":"126268a2bc6c311.html","type":"text/html","size":112233},{"uid":"f1b4cf3bc126408","name":"Request","source":"f1b4cf3bc126408.html","type":"text/html","size":929},{"uid":"a09f23deb199bdbc","name":"HTTP/1.1 200 OK","source":"a09f23deb199bdbc.html","type":"text/html","size":538}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759835561216,"stop":1759835561217,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759835561217,"stop":1759835561217,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestOnIdMismatch()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestOnIdMismatch()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759835567495,"stop":1759835567495,"duration":0},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759835567495,"stop":1759835567495,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.UpdateAuthorsTests]/[method:checkShouldReturnBadRequestOnIdMismatch()]"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"story","value":"Update Authors"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2952@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testMethod","value":"checkShouldReturnBadRequestOnIdMismatch"},{"name":"suite","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ca22b82e7eb7b0a.json","parameterValues":[]}