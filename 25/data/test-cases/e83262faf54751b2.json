{"uid":"e83262faf54751b2","name":"checkShouldReturn404WhenUpdatingNonExistingAuthor()","fullName":"com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturn404WhenUpdatingNonExistingAuthor","historyId":"81c7511609e95c72e0b679066f0f4781","time":{"start":1759867598848,"stop":1759867599118,"duration":270},"description":"PUT /Authors/{id} should return 404 when author does not exist","descriptionHtml":"<p>PUT /Authors/{id} should return 404 when author does not exist</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 404 but was: 200] \nexpected: 404\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 404 but was: 200] \nexpected: 404\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeNotFound(ResponseAssertions.java:50)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturn404WhenUpdatingNonExistingAuthor(UpdateAuthorsTests.java:77)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759867598057,"stop":1759867598059,"duration":2},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759867598057,"stop":1759867598059,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759867598849,"stop":1759867598849,"duration":0},"status":"passed","steps":[{"name":"Start test","time":{"start":1759867598849,"stop":1759867598849,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturn404WhenUpdatingNonExistingAuthor()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturn404WhenUpdatingNonExistingAuthor()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"PUT /Authors/{id} should return 404 when author does not exist","status":"failed","statusMessage":"[Status Code mismatch. Expected: 404 but was: 200] \nexpected: 404\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 404 but was: 200] \nexpected: 404\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeNotFound(ResponseAssertions.java:50)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturn404WhenUpdatingNonExistingAuthor(UpdateAuthorsTests.java:77)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"386354131456a6a1","name":"Request","source":"386354131456a6a1.html","type":"text/html","size":939},{"uid":"f4cc6d24b79a1204","name":"HTTP/1.1 200 OK","source":"f4cc6d24b79a1204.html","type":"text/html","size":539}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759867599117,"stop":1759867599117,"duration":0},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759867599117,"stop":1759867599117,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturn404WhenUpdatingNonExistingAuthor()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturn404WhenUpdatingNonExistingAuthor()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759867606041,"stop":1759867606042,"duration":1},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759867606041,"stop":1759867606042,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.UpdateAuthorsTests]/[method:checkShouldReturn404WhenUpdatingNonExistingAuthor()]"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"story","value":"Update Authors"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2822@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testMethod","value":"checkShouldReturn404WhenUpdatingNonExistingAuthor"},{"name":"suite","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e83262faf54751b2.json","parameterValues":[]}