"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify creating author with only one populated field behaves as expected","283","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 20:06:26 UTC 2025","passed","Tue Oct 07 20:06:26 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that creating an author with null fields returns 400 Bad Request","301","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 20:06:24 UTC 2025","failed","Tue Oct 07 20:06:25 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Verify GET /Authors returns non-empty list and all fields are valid","864","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 20:06:36 UTC 2025","passed","Tue Oct 07 20:06:37 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify that invalid book IDs return 400 Bad Request","275","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 20:06:52 UTC 2025","passed","Tue Oct 07 20:06:52 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 404 when author does not exist","270","checkShouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 20:06:38 UTC 2025","failed","Tue Oct 07 20:06:39 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn404WhenUpdatingNonExistingAuthor"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","337","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 20:06:35 UTC 2025","passed","Tue Oct 07 20:06:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","293","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 20:06:58 UTC 2025","passed","Tue Oct 07 20:06:58 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","273","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 20:06:31 UTC 2025","passed","Tue Oct 07 20:06:32 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"Verify updating a book with empty strings returns 400 Bad Request","536","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 20:07:02 UTC 2025","passed","Tue Oct 07 20:07:03 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"Verify that sending POST /Books without a request body returns 400 Bad Request","301","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 20:06:50 UTC 2025","passed","Tue Oct 07 20:06:51 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","852","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 20:06:28 UTC 2025","failed","Tue Oct 07 20:06:29 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify author IDs are in sequential order","6","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 20:06:38 UTC 2025","passed","Tue Oct 07 20:06:38 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify that creating a book with identical data twice is allowed and both return the same book data","548","checkUserCanCreateBookWithSameDataTwice(SoftAssertions)","","Tue Oct 07 20:06:49 UTC 2025","passed","Tue Oct 07 20:06:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","301","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 20:06:33 UTC 2025","failed","Tue Oct 07 20:06:33 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","284","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 20:06:30 UTC 2025","passed","Tue Oct 07 20:06:30 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","765","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 20:06:42 UTC 2025","failed","Tue Oct 07 20:06:43 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","295","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 20:06:51 UTC 2025","passed","Tue Oct 07 20:06:51 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","736","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 20:06:41 UTC 2025","failed","Tue Oct 07 20:06:42 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","302","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 20:06:58 UTC 2025","passed","Tue Oct 07 20:06:58 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that creating a book with empty all fields returns 400 Bad Request","317","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 20:06:48 UTC 2025","passed","Tue Oct 07 20:06:49 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify double deletion returns 404 for the second call","820","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 20:06:29 UTC 2025","failed","Tue Oct 07 20:06:30 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"PUT /Authors/{id} should return 400 when firstName is blank","775","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 20:06:39 UTC 2025","failed","Tue Oct 07 20:06:40 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify PUT /Authors/{id} updates an existing author successfully","734","checkShouldUpdateExistingAuthor(SoftAssertions)","","Tue Oct 07 20:06:45 UTC 2025","passed","Tue Oct 07 20:06:45 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldUpdateExistingAuthor"
"Verify that a user can create a book with all required fields and they are correctly returned","277","checkUserCanCreateBookWithAllFields(SoftAssertions)","","Tue Oct 07 20:06:46 UTC 2025","passed","Tue Oct 07 20:06:47 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","330","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 20:06:33 UTC 2025","passed","Tue Oct 07 20:06:34 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","305","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 20:06:35 UTC 2025","passed","Tue Oct 07 20:06:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that invalid book IDs return 400 Bad Request","269","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 20:06:51 UTC 2025","passed","Tue Oct 07 20:06:51 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","1594","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 20:07:00 UTC 2025","passed","Tue Oct 07 20:07:02 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","490","checkGetAuthorsByBookIdShouldReturnRelatedAuthors(SoftAssertions)","","Tue Oct 07 20:06:36 UTC 2025","passed","Tue Oct 07 20:06:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"Verify creating a Book with only one populated field behaves as expected","267","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 20:06:48 UTC 2025","passed","Tue Oct 07 20:06:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","443","checkCreateBookWithPastPublishDate(SoftAssertions)","","Tue Oct 07 20:06:46 UTC 2025","passed","Tue Oct 07 20:06:46 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Verify that invalid book IDs return 400 Bad Request","272","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 20:06:51 UTC 2025","passed","Tue Oct 07 20:06:52 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","282","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 20:06:32 UTC 2025","failed","Tue Oct 07 20:06:33 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","315","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 20:06:56 UTC 2025","passed","Tue Oct 07 20:06:57 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","287","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 20:06:57 UTC 2025","passed","Tue Oct 07 20:06:57 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify double deletion returns 404 for the second call","783","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 20:06:54 UTC 2025","failed","Tue Oct 07 20:06:55 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"Verify updating a book with null fields returns 400 Bad Request","543","checkUpdateBookWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 20:07:02 UTC 2025","failed","Tue Oct 07 20:07:02 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturnBadRequest"
"Verify GET /Authors/{id} returns correct author by valid ID","297","checkGetAuthorByIdShouldReturnCorrectAuthor(SoftAssertions)","","Tue Oct 07 20:06:37 UTC 2025","passed","Tue Oct 07 20:06:38 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","305","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 20:06:36 UTC 2025","passed","Tue Oct 07 20:06:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","335","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 20:06:34 UTC 2025","passed","Tue Oct 07 20:06:34 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","865","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 20:06:52 UTC 2025","passed","Tue Oct 07 20:06:53 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify creating a Book with only one populated field behaves as expected","263","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 20:06:48 UTC 2025","passed","Tue Oct 07 20:06:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"GET /Books/{id} should return the correct book for an existing ID","646","checkGetBookByIdShouldReturnValidBook(SoftAssertions)","","Tue Oct 07 20:06:55 UTC 2025","failed","Tue Oct 07 20:06:56 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify creating a Book with only one populated field behaves as expected","267","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 20:06:47 UTC 2025","passed","Tue Oct 07 20:06:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that user can create an author with all required valid fields","4448","checkUserCanCreateAuthorWithAllFields(SoftAssertions)","","Tue Oct 07 20:06:20 UTC 2025","passed","Tue Oct 07 20:06:24 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify that invalid book IDs return 400 Bad Request","271","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 20:06:52 UTC 2025","passed","Tue Oct 07 20:06:52 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"PUT /Authors/{id} with non-numeric path should return 400","281","checkShouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 20:06:45 UTC 2025","passed","Tue Oct 07 20:06:46 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn400WhenPathIsNonNumeric"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","268","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 20:06:54 UTC 2025","passed","Tue Oct 07 20:06:54 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","786","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 20:06:38 UTC 2025","failed","Tue Oct 07 20:06:38 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Create a book with numeric-only title and description","267","checkCreateBookWithNumericStrings(SoftAssertions)","","Tue Oct 07 20:06:50 UTC 2025","passed","Tue Oct 07 20:06:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","268","checkUserCanCreateBookWithEmptyFieldsExceptDate(SoftAssertions)","","Tue Oct 07 20:06:50 UTC 2025","passed","Tue Oct 07 20:06:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Create a book with special characters in all string fields","274","checkCreateBookWithSpecialSymbols(SoftAssertions)","","Tue Oct 07 20:06:49 UTC 2025","passed","Tue Oct 07 20:06:49 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"Verify creating a Book with only one populated field behaves as expected","268","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 20:06:47 UTC 2025","passed","Tue Oct 07 20:06:47 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that invalid author IDs return 400 Bad Request","279","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 20:06:30 UTC 2025","passed","Tue Oct 07 20:06:31 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that user can create an author with minimal valid data","300","checkUserCanCreateAuthorWithMinimalData(SoftAssertions)","","Tue Oct 07 20:06:25 UTC 2025","passed","Tue Oct 07 20:06:25 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Verify creating author with only one populated field behaves as expected","279","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 20:06:26 UTC 2025","passed","Tue Oct 07 20:06:26 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify all Author IDs are unique","4","checkAuthorIdsAreUnique()","","Tue Oct 07 20:06:34 UTC 2025","passed","Tue Oct 07 20:06:34 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify GET /Books returns non-empty list and valid fields","563","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 20:06:59 UTC 2025","passed","Tue Oct 07 20:06:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","723","checkCreateDuplicateAuthorIsAllowed(SoftAssertions)","","Tue Oct 07 20:06:27 UTC 2025","passed","Tue Oct 07 20:06:28 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","745","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 20:06:39 UTC 2025","failed","Tue Oct 07 20:06:39 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","308","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 20:06:34 UTC 2025","passed","Tue Oct 07 20:06:34 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","1348","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 20:06:43 UTC 2025","failed","Tue Oct 07 20:06:45 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify creating a Book with only one populated field behaves as expected","266","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 20:06:47 UTC 2025","passed","Tue Oct 07 20:06:47 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","294","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 20:06:57 UTC 2025","passed","Tue Oct 07 20:06:58 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that POST /Authors without body returns 400 Bad Request","893","checkCreateAuthorWithoutBodyShouldReturnBadRequest(SoftAssertions)","","Tue Oct 07 20:06:26 UTC 2025","passed","Tue Oct 07 20:06:27 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","308","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 20:06:34 UTC 2025","passed","Tue Oct 07 20:06:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","322","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 20:06:58 UTC 2025","passed","Tue Oct 07 20:06:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"PUT /Authors/{id} should return 400 when firstName is blank","770","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 20:06:40 UTC 2025","failed","Tue Oct 07 20:06:41 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that invalid book IDs return 400 Bad Request","285","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 20:06:52 UTC 2025","passed","Tue Oct 07 20:06:52 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","296","checkGetBookByRandomIdShouldReturnValidBookById(SoftAssertions)","","Tue Oct 07 20:06:59 UTC 2025","passed","Tue Oct 07 20:06:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","274","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/9999999 → should return 404 for nonexistent book ID","","Tue Oct 07 20:06:33 UTC 2025","failed","Tue Oct 07 20:06:33 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify that books are returned in sequential order by ID","79","checkBooksReturnedInSequentialOrder(SoftAssertions)","","Tue Oct 07 20:06:59 UTC 2025","passed","Tue Oct 07 20:06:59 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Verify updating a book without a request body returns 400 Bad Request","5","checkUpdateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 20:07:02 UTC 2025","broken","Tue Oct 07 20:07:02 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","283","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 20:06:31 UTC 2025","passed","Tue Oct 07 20:06:31 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify each author has a valid first and last name pattern","16","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 20:06:36 UTC 2025","passed","Tue Oct 07 20:06:36 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Create a book with a title that includes mixed characters","268","checkCreateBookWithMixedCharacters(SoftAssertions)","","Tue Oct 07 20:06:50 UTC 2025","passed","Tue Oct 07 20:06:50 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"Create a book with emoji and unicode characters","285","checkCreateBookWithEmojiAndUnicode(SoftAssertions)","","Tue Oct 07 20:06:46 UTC 2025","passed","Tue Oct 07 20:06:46 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify that invalid author IDs return 400 Bad Request","284","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 20:06:30 UTC 2025","passed","Tue Oct 07 20:06:30 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","291","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 20:06:25 UTC 2025","passed","Tue Oct 07 20:06:26 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","291","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 20:06:57 UTC 2025","passed","Tue Oct 07 20:06:57 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify updating an existing book successfully changes its fields and returns 200 OK","538","checkUpdateExistingBookShouldReturnOk(SoftAssertions)","","Tue Oct 07 20:06:59 UTC 2025","passed","Tue Oct 07 20:07:00 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturnOk"
"Verify that creating author with special characters in names is accepted","327","checkCreateAuthorWithSpecialCharacters(SoftAssertions)","","Tue Oct 07 20:06:24 UTC 2025","passed","Tue Oct 07 20:06:24 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify deleting a non-existent book returns 404 Not Found","264","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 20:06:53 UTC 2025","failed","Tue Oct 07 20:06:54 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify updating a non-existent book returns 404 Not Found","268","checkUpdateNonExistentBookShouldReturnNotFound()","","Tue Oct 07 20:07:03 UTC 2025","failed","Tue Oct 07 20:07:03 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturnNotFound"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","338","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 20:06:35 UTC 2025","passed","Tue Oct 07 20:06:35 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","741","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 20:06:42 UTC 2025","failed","Tue Oct 07 20:06:42 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify creating a Book with only one populated field behaves as expected","269","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 20:06:47 UTC 2025","passed","Tue Oct 07 20:06:47 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify deleting a non-existent author returns 404 Not Found","302","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 20:06:28 UTC 2025","failed","Tue Oct 07 20:06:28 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify that creating a book with empty fields returns sucess","282","checkUserCanCreateBookWithNullFields(SoftAssertions)","","Tue Oct 07 20:06:48 UTC 2025","passed","Tue Oct 07 20:06:48 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","66","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 20:06:58 UTC 2025","passed","Tue Oct 07 20:06:58 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify that invalid author IDs return 400 Bad Request","282","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 20:06:31 UTC 2025","passed","Tue Oct 07 20:06:31 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that creating an author with empty fields returns 400 Bad Request","291","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 20:06:25 UTC 2025","failed","Tue Oct 07 20:06:25 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify that all book IDs are unique across the list","2","checkReturnedBookIdsAreUnique()","","Tue Oct 07 20:06:56 UTC 2025","passed","Tue Oct 07 20:06:56 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","291","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 20:06:56 UTC 2025","passed","Tue Oct 07 20:06:56 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
