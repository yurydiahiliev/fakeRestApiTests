{"uid":"4fbcd252f20aaa3","name":"checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","fullName":"com.fakeRestApi.tests.author.DeleteAuthorsTests.checkDeleteInvalidAuthorIdShouldReturnBadRequest","historyId":"a0dcc1deaf2e5fe846e5aee74b638f51","time":{"start":1759867431441,"stop":1759867431748,"duration":307},"description":"Verify that invalid author IDs return 400 Bad Request","descriptionHtml":"<p>Verify that invalid author IDs return 400 Bad Request</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759867429123,"stop":1759867429128,"duration":5},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759867429123,"stop":1759867429128,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759867431441,"stop":1759867431442,"duration":1},"status":"passed","steps":[{"name":"Start test","time":{"start":1759867431441,"stop":1759867431442,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'DELETE /Authors/! should return 400 Bad Request', tags = [], testClass = class com.fakeRestApi.tests.author.DeleteAuthorsTests, testMethod = void com.fakeRestApi.tests.author.DeleteAuthorsTests.checkDeleteInvalidAuthorIdShouldReturnBadRequest(java.lang.String)]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify that invalid author IDs return 400 Bad Request","status":"passed","steps":[],"attachments":[{"uid":"720346f27619fb00","name":"Request","source":"720346f27619fb00.html","type":"text/html","size":546},{"uid":"24808a8e57b46900","name":"HTTP/1.1 400 Bad Request","source":"24808a8e57b46900.html","type":"text/html","size":760}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759867431747,"stop":1759867431747,"duration":0},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759867431747,"stop":1759867431747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'DELETE /Authors/! should return 400 Bad Request', tags = [], testClass = class com.fakeRestApi.tests.author.DeleteAuthorsTests, testMethod = void com.fakeRestApi.tests.author.DeleteAuthorsTests.checkDeleteInvalidAuthorIdShouldReturnBadRequest(java.lang.String)]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759867432889,"stop":1759867432890,"duration":1},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759867432889,"stop":1759867432890,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.DeleteAuthorsTests]/[test-template:checkDeleteInvalidAuthorIdShouldReturnBadRequest(java.lang.String)]/[test-template-invocation:#2]"},{"name":"feature","value":"Authors API"},{"name":"story","value":"Delete Authors"},{"name":"epic","value":"Fake REST API tests"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2796@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.DeleteAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.DeleteAuthorsTests"},{"name":"testMethod","value":"checkDeleteInvalidAuthorIdShouldReturnBadRequest"},{"name":"suite","value":"com.fakeRestApi.tests.author.DeleteAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"arg0","value":"!"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":5},"items":[{"uid":"64ed2dfb347b6a3","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/23/#testresult/64ed2dfb347b6a3","status":"passed","time":{"start":1759859544257,"stop":1759859544537,"duration":280}},{"uid":"3a0fb51b3368c58","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/22/#testresult/3a0fb51b3368c58","status":"passed","time":{"start":1759859124244,"stop":1759859124725,"duration":481}},{"uid":"36dce8bbe956b2f7","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/21/#testresult/36dce8bbe956b2f7","status":"passed","time":{"start":1759858704117,"stop":1759858704412,"duration":295}},{"uid":"82d238e496df2fe","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/82d238e496df2fe","status":"passed","time":{"start":1759852915668,"stop":1759852916160,"duration":492}}]},"tags":[]},"source":"4fbcd252f20aaa3.json","parameterValues":["!"]}