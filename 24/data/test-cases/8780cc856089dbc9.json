{"uid":"8780cc856089dbc9","name":"checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","fullName":"com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenLastNameBlank","historyId":"7294663771f14b3f7e38feb31ee3d59a","time":{"start":1759867443496,"stop":1759867444259,"duration":763},"description":"PUT /Authors/{id} should return 400 when lastName is blank","descriptionHtml":"<p>PUT /Authors/{id} should return 400 when lastName is blank</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenLastNameBlank(UpdateAuthorsTests.java:116)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat io.qameta.allure.junit5.AllureJunit5.interceptTestTemplateMethod(AllureJunit5.java:59)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759867438664,"stop":1759867438665,"duration":1},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759867438664,"stop":1759867438665,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759867443497,"stop":1759867443497,"duration":0},"status":"passed","steps":[{"name":"Start test","time":{"start":1759867443497,"stop":1759867443497,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = '[1] ', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenLastNameBlank(java.lang.String)]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"PUT /Authors/{id} should return 400 when lastName is blank","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenLastNameBlank(UpdateAuthorsTests.java:116)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat io.qameta.allure.junit5.AllureJunit5.interceptTestTemplateMethod(AllureJunit5.java:59)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"bffe5646960d23fe","name":"Request","source":"bffe5646960d23fe.html","type":"text/html","size":532},{"uid":"f61e995fbce29a53","name":"HTTP/1.1 200 OK","source":"f61e995fbce29a53.html","type":"text/html","size":115444},{"uid":"e0805714030295a","name":"Request","source":"e0805714030295a.html","type":"text/html","size":911},{"uid":"31a50849abd5e19a","name":"HTTP/1.1 200 OK","source":"31a50849abd5e19a.html","type":"text/html","size":529}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759867444258,"stop":1759867444258,"duration":0},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759867444258,"stop":1759867444258,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = '[1] ', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenLastNameBlank(java.lang.String)]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759867446095,"stop":1759867446095,"duration":0},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759867446095,"stop":1759867446095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.UpdateAuthorsTests]/[test-template:checkShouldReturnBadRequestWhenLastNameBlank(java.lang.String)]/[test-template-invocation:#1]"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"story","value":"Update Authors"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2796@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testMethod","value":"checkShouldReturnBadRequestWhenLastNameBlank"},{"name":"suite","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"severity","value":"minor"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"arg0","value":""}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":11},"items":[{"uid":"b039f1b3ee1158d5","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/23/#testresult/b039f1b3ee1158d5","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859557487,"stop":1759859558341,"duration":854}},{"uid":"6e6b18c738b5164a","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/22/#testresult/6e6b18c738b5164a","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859144896,"stop":1759859146150,"duration":1254}},{"uid":"5ac9dc96a5c5e789","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/21/#testresult/5ac9dc96a5c5e789","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759858718164,"stop":1759858718956,"duration":792}},{"uid":"4ad61f2c1262807c","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/4ad61f2c1262807c","status":"failed","statusDetails":"[200 Status Code not equal to - 400] \nexpected: 400\n but was: 200","time":{"start":1759852943584,"stop":1759852945095,"duration":1511}},{"uid":"206da3f2f75ef2af","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/19/#testresult/206da3f2f75ef2af","status":"failed","statusDetails":"[Should return 400 when lastName is blank] \nexpected: 400\n but was: 200","time":{"start":1759838448730,"stop":1759838449568,"duration":838}},{"uid":"58347dc780e5288c","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/18/#testresult/58347dc780e5288c","status":"failed","statusDetails":"[Should return 400 when lastName is blank] \nexpected: 400\n but was: 200","time":{"start":1759838402582,"stop":1759838403746,"duration":1164}},{"uid":"993cbc8a0385823b","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/17/#testresult/993cbc8a0385823b","status":"failed","statusDetails":"[Should return 400 when lastName is blank] \nexpected: 400\n but was: 200","time":{"start":1759838246294,"stop":1759838247125,"duration":831}},{"uid":"c2ab856948720ce2","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/16/#testresult/c2ab856948720ce2","status":"failed","statusDetails":"[Should return 400 when lastName is blank] \nexpected: 400\n but was: 200","time":{"start":1759838000697,"stop":1759838002847,"duration":2150}},{"uid":"32d7ad4985e84332","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/15/#testresult/32d7ad4985e84332","status":"failed","statusDetails":"[Should return 400 when lastName is blank] \nexpected: 400\n but was: 200","time":{"start":1759837736115,"stop":1759837736822,"duration":707}},{"uid":"2744eafba90a6490","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/14/#testresult/2744eafba90a6490","status":"failed","statusDetails":"[Should return 400 when lastName is blank] \nexpected: 400\n but was: 200","time":{"start":1759835565110,"stop":1759835565797,"duration":687}}]},"tags":[]},"source":"8780cc856089dbc9.json","parameterValues":[""]}