{"uid":"f61877f0226fcdf3","name":"checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","fullName":"com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest","historyId":"f514c2f045528f29261d71b46bdca623","time":{"start":1759867425599,"stop":1759867425903,"duration":304},"description":"Verify that creating an author with null fields returns 400 Bad Request","descriptionHtml":"<p>Verify that creating an author with null fields returns 400 Bad Request</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest(CreateAuthorsTests.java:107)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759867419825,"stop":1759867420639,"duration":814},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759867419842,"stop":1759867420638,"duration":796},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759867425600,"stop":1759867425600,"duration":0},"status":"passed","steps":[{"name":"Start test","time":{"start":1759867425600,"stop":1759867425600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithNullFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify that creating an author with null fields returns 400 Bad Request","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest(CreateAuthorsTests.java:107)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"cccab4fe8e3efe56","name":"Request","source":"cccab4fe8e3efe56.html","type":"text/html","size":649},{"uid":"9d307430f742c016","name":"HTTP/1.1 200 OK","source":"9d307430f742c016.html","type":"text/html","size":508}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759867425898,"stop":1759867425899,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759867425899,"stop":1759867425899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithNullFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759867429113,"stop":1759867429116,"duration":3},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759867429114,"stop":1759867429116,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.CreateAuthorsTests]/[method:checkCreateAuthorWithNullFieldsShouldReturnBadRequest()]"},{"name":"story","value":"Create Authors"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2796@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testMethod","value":"checkCreateAuthorWithNullFieldsShouldReturnBadRequest"},{"name":"suite","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":11},"items":[{"uid":"e867936b0b923b08","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/23/#testresult/e867936b0b923b08","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859538511,"stop":1759859538817,"duration":306}},{"uid":"7bc21edfabe9899","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/22/#testresult/7bc21edfabe9899","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859114769,"stop":1759859115347,"duration":578}},{"uid":"5fce75bb8448826","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/21/#testresult/5fce75bb8448826","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759858697973,"stop":1759858698336,"duration":363}},{"uid":"394abb6ba0468660","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/394abb6ba0468660","status":"failed","statusDetails":"[200 Status Code not equal to - 400] \nexpected: 400\n but was: 200","time":{"start":1759852906705,"stop":1759852907215,"duration":510}},{"uid":"ef905ccabcf20ebd","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/19/#testresult/ef905ccabcf20ebd","status":"failed","statusDetails":"[Expected 400 Bad Request for null fields] \nexpected: 400\n but was: 200","time":{"start":1759838427998,"stop":1759838428374,"duration":376}},{"uid":"73e05815bf830c59","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/18/#testresult/73e05815bf830c59","status":"failed","statusDetails":"[Expected 400 Bad Request for null fields] \nexpected: 400\n but was: 200","time":{"start":1759838376057,"stop":1759838376549,"duration":492}},{"uid":"9308b01a38d97258","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/17/#testresult/9308b01a38d97258","status":"failed","statusDetails":"[Expected 400 Bad Request for null fields] \nexpected: 400\n but was: 200","time":{"start":1759838224499,"stop":1759838224884,"duration":385}},{"uid":"7886c463b5f29256","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/16/#testresult/7886c463b5f29256","status":"failed","statusDetails":"[Expected 400 Bad Request for null fields] \nexpected: 400\n but was: 200","time":{"start":1759837983585,"stop":1759837983917,"duration":332}},{"uid":"ce4a45d4163b75e5","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/15/#testresult/ce4a45d4163b75e5","status":"failed","statusDetails":"[Expected 400 Bad Request for null fields] \nexpected: 400\n but was: 200","time":{"start":1759837718724,"stop":1759837719037,"duration":313}},{"uid":"bcb837af3b3a00eb","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/14/#testresult/bcb837af3b3a00eb","status":"failed","statusDetails":"[Expected 400 Bad Request for null fields] \nexpected: 400\n but was: 200","time":{"start":1759835538440,"stop":1759835542102,"duration":3662}}]},"tags":[]},"source":"f61877f0226fcdf3.json","parameterValues":[]}