{"uid":"1d9642e11caf2df9","name":"checkShouldReturnBadRequestWhenIdBookInvalid()","fullName":"com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenIdBookInvalid","historyId":"93f80acbca051141b4d6fc9e97192a77","time":{"start":1759867440263,"stop":1759867441007,"duration":744},"description":"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","descriptionHtml":"<p>PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenIdBookInvalid(UpdateAuthorsTests.java:157)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759867438664,"stop":1759867438665,"duration":1},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759867438664,"stop":1759867438665,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759867440263,"stop":1759867440263,"duration":0},"status":"passed","steps":[{"name":"Start test","time":{"start":1759867440263,"stop":1759867440263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestWhenIdBookInvalid()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenIdBookInvalid()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenIdBookInvalid(UpdateAuthorsTests.java:157)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"2b3b5dedfbe4f495","name":"Request","source":"2b3b5dedfbe4f495.html","type":"text/html","size":532},{"uid":"11258f55b154946a","name":"HTTP/1.1 200 OK","source":"11258f55b154946a.html","type":"text/html","size":113744},{"uid":"768e144b0ca86eee","name":"Request","source":"768e144b0ca86eee.html","type":"text/html","size":925},{"uid":"b7bd79ab0f25ba58","name":"HTTP/1.1 200 OK","source":"b7bd79ab0f25ba58.html","type":"text/html","size":536}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759867441006,"stop":1759867441007,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759867441007,"stop":1759867441007,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkShouldReturnBadRequestWhenIdBookInvalid()', tags = [], testClass = class com.fakeRestApi.tests.author.UpdateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.UpdateAuthorsTests.checkShouldReturnBadRequestWhenIdBookInvalid()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759867446095,"stop":1759867446095,"duration":0},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759867446095,"stop":1759867446095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.UpdateAuthorsTests]/[method:checkShouldReturnBadRequestWhenIdBookInvalid()]"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"story","value":"Update Authors"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2796@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"testMethod","value":"checkShouldReturnBadRequestWhenIdBookInvalid"},{"name":"suite","value":"com.fakeRestApi.tests.author.UpdateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":11,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":11},"items":[{"uid":"a9fb112d56a50564","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/23/#testresult/a9fb112d56a50564","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859554154,"stop":1759859554883,"duration":729}},{"uid":"a374366b00da0cb3","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/22/#testresult/a374366b00da0cb3","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759859139219,"stop":1759859140629,"duration":1410}},{"uid":"fa588934e3c7f88e","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/21/#testresult/fa588934e3c7f88e","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759858714587,"stop":1759858715446,"duration":859}},{"uid":"cf07b6d630eb874f","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/20/#testresult/cf07b6d630eb874f","status":"failed","statusDetails":"[200 Status Code not equal to - 400] \nexpected: 400\n but was: 200","time":{"start":1759852930348,"stop":1759852932070,"duration":1722}},{"uid":"c3f5065123b443d5","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/19/#testresult/c3f5065123b443d5","status":"failed","statusDetails":"[Invalid idBook reference should return 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759838444923,"stop":1759838445801,"duration":878}},{"uid":"9243ace130f15290","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/18/#testresult/9243ace130f15290","status":"failed","statusDetails":"[Invalid idBook reference should return 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759838397548,"stop":1759838398638,"duration":1090}},{"uid":"97e346b461272719","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/17/#testresult/97e346b461272719","status":"failed","statusDetails":"[Invalid idBook reference should return 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759838242432,"stop":1759838243358,"duration":926}},{"uid":"5ce114b89d3fe62f","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/16/#testresult/5ce114b89d3fe62f","status":"failed","statusDetails":"[Invalid idBook reference should return 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759837997506,"stop":1759837998229,"duration":723}},{"uid":"d0fc2590af7936","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/15/#testresult/d0fc2590af7936","status":"failed","statusDetails":"[Invalid idBook reference should return 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759837732874,"stop":1759837733612,"duration":738}},{"uid":"b8de65ef196d25bd","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/14/#testresult/b8de65ef196d25bd","status":"failed","statusDetails":"[Invalid idBook reference should return 400 Bad Request] \nexpected: 400\n but was: 200","time":{"start":1759835561944,"stop":1759835562648,"duration":704}}]},"tags":[]},"source":"1d9642e11caf2df9.json","parameterValues":[]}