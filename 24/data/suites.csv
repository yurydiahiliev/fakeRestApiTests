"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","272","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 20:04:14 UTC 2025","passed","Tue Oct 07 20:04:14 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","272","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 20:03:54 UTC 2025","failed","Tue Oct 07 20:03:54 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","432","checkCreateBookWithPastPublishDate(SoftAssertions)","","Tue Oct 07 20:04:06 UTC 2025","passed","Tue Oct 07 20:04:06 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Verify deleting a non-existent book returns 404 Not Found","262","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 20:04:14 UTC 2025","failed","Tue Oct 07 20:04:14 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify that invalid author IDs return 400 Bad Request","295","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 20:03:51 UTC 2025","passed","Tue Oct 07 20:03:51 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","265","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 20:03:52 UTC 2025","passed","Tue Oct 07 20:03:52 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"PUT /Authors/{id} should return 400 when lastName is blank","763","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 20:04:03 UTC 2025","failed","Tue Oct 07 20:04:04 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","287","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 20:04:17 UTC 2025","passed","Tue Oct 07 20:04:17 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify double deletion returns 404 for the second call","821","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 20:03:50 UTC 2025","failed","Tue Oct 07 20:03:51 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"Verify that invalid book IDs return 400 Bad Request","268","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 20:04:12 UTC 2025","passed","Tue Oct 07 20:04:12 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","846","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 20:03:49 UTC 2025","failed","Tue Oct 07 20:03:50 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","372","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 20:04:17 UTC 2025","passed","Tue Oct 07 20:04:18 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","271","checkUserCanCreateBookWithEmptyFieldsExceptDate(SoftAssertions)","","Tue Oct 07 20:04:10 UTC 2025","passed","Tue Oct 07 20:04:10 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"PUT /Authors/{id} should return 400 when lastName is blank","754","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 20:04:04 UTC 2025","failed","Tue Oct 07 20:04:05 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","297","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 20:04:17 UTC 2025","passed","Tue Oct 07 20:04:17 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","591","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 20:04:18 UTC 2025","passed","Tue Oct 07 20:04:19 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","1082","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 20:04:12 UTC 2025","passed","Tue Oct 07 20:04:13 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify updating an existing book successfully changes its fields and returns 200 OK","534","checkUpdateExistingBookShouldReturnOk(SoftAssertions)","","Tue Oct 07 20:04:20 UTC 2025","passed","Tue Oct 07 20:04:21 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturnOk"
"Verify that POST /Authors without body returns 400 Bad Request","938","checkCreateAuthorWithoutBodyShouldReturnBadRequest(SoftAssertions)","","Tue Oct 07 20:03:47 UTC 2025","passed","Tue Oct 07 20:03:48 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturnBadRequest"
"Verify updating a book with null fields returns 400 Bad Request","548","checkUpdateBookWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 20:04:22 UTC 2025","failed","Tue Oct 07 20:04:23 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturnBadRequest"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","25","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 20:04:17 UTC 2025","passed","Tue Oct 07 20:04:17 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify that sending POST /Books without a request body returns 400 Bad Request","304","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 20:04:10 UTC 2025","passed","Tue Oct 07 20:04:11 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"Verify that creating an author with empty fields returns 400 Bad Request","290","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 20:03:46 UTC 2025","failed","Tue Oct 07 20:03:46 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify that creating an author with null fields returns 400 Bad Request","304","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 20:03:45 UTC 2025","failed","Tue Oct 07 20:03:45 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","744","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 20:04:00 UTC 2025","failed","Tue Oct 07 20:04:01 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"Verify that invalid author IDs return 400 Bad Request","277","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 20:03:52 UTC 2025","passed","Tue Oct 07 20:03:52 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that user can create an author with minimal valid data","324","checkUserCanCreateAuthorWithMinimalData(SoftAssertions)","","Tue Oct 07 20:03:45 UTC 2025","passed","Tue Oct 07 20:03:46 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","314","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 20:03:55 UTC 2025","passed","Tue Oct 07 20:03:56 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","301","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 20:03:55 UTC 2025","passed","Tue Oct 07 20:03:55 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","300","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 20:03:54 UTC 2025","passed","Tue Oct 07 20:03:55 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","268","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 20:04:08 UTC 2025","passed","Tue Oct 07 20:04:08 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify creating author with only one populated field behaves as expected","281","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 20:03:47 UTC 2025","passed","Tue Oct 07 20:03:47 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that invalid author IDs return 400 Bad Request","309","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 20:03:52 UTC 2025","passed","Tue Oct 07 20:03:52 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","730","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 20:04:02 UTC 2025","failed","Tue Oct 07 20:04:03 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that creating a book with empty all fields returns 400 Bad Request","308","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 20:04:09 UTC 2025","passed","Tue Oct 07 20:04:09 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify deleting a non-existent author returns 404 Not Found","336","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 20:03:49 UTC 2025","failed","Tue Oct 07 20:03:49 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","272","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/9999999 → should return 404 for nonexistent book ID","","Tue Oct 07 20:03:54 UTC 2025","failed","Tue Oct 07 20:03:54 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify PUT /Authors/{id} updates an existing author successfully","774","shouldUpdateExistingAuthor(SoftAssertions)","","Tue Oct 07 20:03:59 UTC 2025","passed","Tue Oct 07 20:04:00 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldUpdateExistingAuthor"
"Verify author IDs are in sequential order","6","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 20:03:58 UTC 2025","passed","Tue Oct 07 20:03:58 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify creating a Book with only one populated field behaves as expected","280","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 20:04:07 UTC 2025","passed","Tue Oct 07 20:04:07 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","310","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 20:03:54 UTC 2025","passed","Tue Oct 07 20:03:54 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify that invalid book IDs return 400 Bad Request","278","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 20:04:11 UTC 2025","passed","Tue Oct 07 20:04:11 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","293","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 20:04:16 UTC 2025","passed","Tue Oct 07 20:04:16 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","372","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 20:04:18 UTC 2025","passed","Tue Oct 07 20:04:18 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Create a book with special characters in all string fields","267","checkCreateBookWithSpecialSymbols(SoftAssertions)","","Tue Oct 07 20:04:09 UTC 2025","passed","Tue Oct 07 20:04:09 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"PUT /Authors/{id} should return 400 when firstName is blank","738","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 20:04:01 UTC 2025","failed","Tue Oct 07 20:04:02 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that invalid book IDs return 400 Bad Request","269","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 20:04:11 UTC 2025","passed","Tue Oct 07 20:04:12 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","281","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 20:03:51 UTC 2025","passed","Tue Oct 07 20:03:52 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that all book IDs are unique across the list","2","checkReturnedBookIdsAreUnique()","","Tue Oct 07 20:04:16 UTC 2025","passed","Tue Oct 07 20:04:16 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","289","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 20:04:17 UTC 2025","passed","Tue Oct 07 20:04:17 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that creating author with special characters in names is accepted","333","checkCreateAuthorWithSpecialCharacters(SoftAssertions)","","Tue Oct 07 20:03:45 UTC 2025","passed","Tue Oct 07 20:03:45 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify that invalid book IDs return 400 Bad Request","273","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 20:04:12 UTC 2025","passed","Tue Oct 07 20:04:12 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify GET /Books returns non-empty list and valid fields","604","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 20:04:19 UTC 2025","passed","Tue Oct 07 20:04:19 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify updating a non-existent book returns 404 Not Found","276","checkUpdateNonExistentBookShouldReturnNotFound()","","Tue Oct 07 20:04:23 UTC 2025","failed","Tue Oct 07 20:04:24 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturnNotFound"
"Create a book with numeric-only title and description","282","checkCreateBookWithNumericStrings(SoftAssertions)","","Tue Oct 07 20:04:10 UTC 2025","passed","Tue Oct 07 20:04:10 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","303","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 20:04:16 UTC 2025","passed","Tue Oct 07 20:04:17 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that books are returned in sequential order by ID","73","checkBooksReturnedInSequentialOrder(SoftAssertions)","","Tue Oct 07 20:04:19 UTC 2025","passed","Tue Oct 07 20:04:19 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Create a book with emoji and unicode characters","275","checkCreateBookWithEmojiAndUnicode(SoftAssertions)","","Tue Oct 07 20:04:06 UTC 2025","passed","Tue Oct 07 20:04:06 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","536","checkGetAuthorsByBookIdShouldReturnRelatedAuthors(SoftAssertions)","","Tue Oct 07 20:03:57 UTC 2025","passed","Tue Oct 07 20:03:57 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"Verify double deletion returns 404 for the second call","805","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 20:04:14 UTC 2025","failed","Tue Oct 07 20:04:15 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"Verify GET /Authors/{id} returns correct author by valid ID","272","checkGetAuthorByIdShouldReturnCorrectAuthor(SoftAssertions)","","Tue Oct 07 20:03:58 UTC 2025","passed","Tue Oct 07 20:03:58 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify GET /Authors returns non-empty list and all fields are valid","824","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 20:03:57 UTC 2025","passed","Tue Oct 07 20:03:58 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify creating author with only one populated field behaves as expected","295","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 20:03:46 UTC 2025","passed","Tue Oct 07 20:03:47 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that invalid book IDs return 400 Bad Request","268","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 20:04:12 UTC 2025","passed","Tue Oct 07 20:04:12 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","286","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 20:04:07 UTC 2025","passed","Tue Oct 07 20:04:07 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"PUT /Authors/{id} should return 400 when firstName is blank","720","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 20:04:01 UTC 2025","failed","Tue Oct 07 20:04:01 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that invalid author IDs return 400 Bad Request","307","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 20:03:51 UTC 2025","passed","Tue Oct 07 20:03:51 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify all Author IDs are unique","3","checkAuthorIdsAreUnique()","","Tue Oct 07 20:03:55 UTC 2025","passed","Tue Oct 07 20:03:55 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"PUT /Authors/{id} should return 404 when author does not exist","284","shouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 20:04:03 UTC 2025","failed","Tue Oct 07 20:04:03 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn404WhenUpdatingNonExistingAuthor"
"PUT /Authors/{id} should return 400 when lastName is blank","755","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 20:04:05 UTC 2025","failed","Tue Oct 07 20:04:05 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","736","checkCreateDuplicateAuthorIsAllowed(SoftAssertions)","","Tue Oct 07 20:03:48 UTC 2025","passed","Tue Oct 07 20:03:49 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify updating a book with empty strings returns 400 Bad Request","550","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 20:04:23 UTC 2025","passed","Tue Oct 07 20:04:23 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","819","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 20:03:58 UTC 2025","failed","Tue Oct 07 20:03:59 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","289","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 20:03:56 UTC 2025","passed","Tue Oct 07 20:03:56 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} with non-numeric path should return 400","319","checkShouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 20:04:05 UTC 2025","passed","Tue Oct 07 20:04:06 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn400WhenPathIsNonNumeric"
"GET /Books/{id} should return the correct book for an existing ID","575","checkGetBookByIdShouldReturnValidBook(SoftAssertions)","","Tue Oct 07 20:04:15 UTC 2025","failed","Tue Oct 07 20:04:16 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","303","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 20:03:55 UTC 2025","passed","Tue Oct 07 20:03:55 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Create a book with a title that includes mixed characters","268","checkCreateBookWithMixedCharacters(SoftAssertions)","","Tue Oct 07 20:04:10 UTC 2025","passed","Tue Oct 07 20:04:10 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"Verify creating author with only one populated field behaves as expected","295","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 20:03:46 UTC 2025","passed","Tue Oct 07 20:03:46 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify creating a Book with only one populated field behaves as expected","268","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 20:04:07 UTC 2025","passed","Tue Oct 07 20:04:07 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","1601","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 20:04:21 UTC 2025","passed","Tue Oct 07 20:04:22 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify updating a book without a request body returns 400 Bad Request","4","checkUpdateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 20:04:22 UTC 2025","broken","Tue Oct 07 20:04:22 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturnBadRequest"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","689","checkGetBookByRandomIdShouldReturnValidBookById(SoftAssertions)","","Tue Oct 07 20:04:19 UTC 2025","passed","Tue Oct 07 20:04:20 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"Verify that creating a book with identical data twice is allowed and both return the same book data","535","checkUserCanCreateBookWithSameDataTwice(SoftAssertions)","","Tue Oct 07 20:04:09 UTC 2025","passed","Tue Oct 07 20:04:10 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify that creating a book with empty fields returns sucess","274","checkUserCanCreateBookWithNullFields(SoftAssertions)","","Tue Oct 07 20:04:08 UTC 2025","passed","Tue Oct 07 20:04:09 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify that a user can create a book with all required fields and they are correctly returned","277","checkUserCanCreateBookWithAllFields(SoftAssertions)","","Tue Oct 07 20:04:06 UTC 2025","passed","Tue Oct 07 20:04:07 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Verify each author has a valid first and last name pattern","14","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 20:03:57 UTC 2025","passed","Tue Oct 07 20:03:57 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","290","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 20:04:11 UTC 2025","passed","Tue Oct 07 20:04:11 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","282","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 20:03:53 UTC 2025","failed","Tue Oct 07 20:03:54 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify that user can create an author with all required valid fields","4482","checkUserCanCreateAuthorWithAllFields(SoftAssertions)","","Tue Oct 07 20:03:40 UTC 2025","passed","Tue Oct 07 20:03:45 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","298","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 20:03:56 UTC 2025","passed","Tue Oct 07 20:03:56 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","293","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 20:03:56 UTC 2025","passed","Tue Oct 07 20:03:56 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","272","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 20:04:08 UTC 2025","passed","Tue Oct 07 20:04:08 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify creating a Book with only one populated field behaves as expected","265","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 20:04:07 UTC 2025","passed","Tue Oct 07 20:04:08 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
