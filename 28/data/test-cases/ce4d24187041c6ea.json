{"uid":"ce4d24187041c6ea","name":"checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","fullName":"com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest","historyId":"f514c2f045528f29261d71b46bdca623","time":{"start":1759868214012,"stop":1759868214458,"duration":446},"description":"Verify that creating an author with null fields returns 400 Bad Request","descriptionHtml":"<p>Verify that creating an author with null fields returns 400 Bad Request</p>\n","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest(CreateAuthorsTests.java:107)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"initApiClients","time":{"start":1759868208584,"stop":1759868209235,"duration":651},"status":"passed","steps":[{"name":"Initialize API clients","time":{"start":1759868208599,"stop":1759868209234,"duration":635},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"logTestStart","time":{"start":1759868214017,"stop":1759868214018,"duration":1},"status":"passed","steps":[{"name":"Start test","time":{"start":1759868214017,"stop":1759868214018,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithNullFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Verify that creating an author with null fields returns 400 Bad Request","status":"failed","statusMessage":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","statusTrace":"org.opentest4j.AssertionFailedError: [Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200\n\tat com.fakeRestApi.utils.ResponseAssertions.hasStatusCode(ResponseAssertions.java:33)\n\tat com.fakeRestApi.utils.ResponseAssertions.verifyStatusCodeBadRequest(ResponseAssertions.java:58)\n\tat com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest(CreateAuthorsTests.java:107)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\n","steps":[],"attachments":[{"uid":"afc1357bf8a4eebc","name":"Request","source":"afc1357bf8a4eebc.html","type":"text/html","size":649},{"uid":"df5349ed5a0e5197","name":"HTTP/1.1 200 OK","source":"df5349ed5a0e5197.html","type":"text/html","size":508}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"logTestFinish","time":{"start":1759868214453,"stop":1759868214454,"duration":1},"status":"passed","steps":[{"name":"Finish test","time":{"start":1759868214454,"stop":1759868214454,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"testInfo","value":"DefaultTestInfo [displayName = 'checkCreateAuthorWithNullFieldsShouldReturnBadRequest()', tags = [], testClass = class com.fakeRestApi.tests.author.CreateAuthorsTests, testMethod = void com.fakeRestApi.tests.author.CreateAuthorsTests.checkCreateAuthorWithNullFieldsShouldReturnBadRequest()]"}],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"tearDown","time":{"start":1759868218647,"stop":1759868218649,"duration":2},"status":"passed","steps":[{"name":"Tear down test environment","time":{"start":1759868218647,"stop":1759868218649,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.fakeRestApi.tests.author.CreateAuthorsTests]/[method:checkCreateAuthorWithNullFieldsShouldReturnBadRequest()]"},{"name":"story","value":"Create Authors"},{"name":"feature","value":"Authors API"},{"name":"epic","value":"Fake REST API tests"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2802@runnervmwhb2z.Test worker(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testClass","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"testMethod","value":"checkCreateAuthorWithNullFieldsShouldReturnBadRequest"},{"name":"suite","value":"com.fakeRestApi.tests.author.CreateAuthorsTests"},{"name":"severity","value":"normal"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"e12f1698d65df84b","reportUrl":"https://yurydiahiliev.github.io/fakeRestApiTests/27/#testresult/e12f1698d65df84b","status":"failed","statusDetails":"[Status Code mismatch. Expected: 400 but was: 200] \nexpected: 400\n but was: 200","time":{"start":1759868037302,"stop":1759868037749,"duration":447}}]},"tags":[]},"source":"ce4d24187041c6ea.json","parameterValues":[]}