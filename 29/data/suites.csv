"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify that invalid author IDs return 400 Bad Request","285","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/$ should return 400 Bad Request","","Wed Oct 08 07:43:11 UTC 2025","passed","Wed Oct 08 07:43:11 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","296","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Wed Oct 08 07:43:05 UTC 2025","passed","Wed Oct 08 07:43:06 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify GET /Authors/{id} returns correct author by valid ID","290","checkGetAuthorByIdShouldReturnCorrectAuthor(SoftAssertions)","","Wed Oct 08 07:43:17 UTC 2025","passed","Wed Oct 08 07:43:18 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"PUT /Authors/{id} should return 400 when firstName is blank","731","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Wed Oct 08 07:43:20 UTC 2025","failed","Wed Oct 08 07:43:21 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"PUT /Authors/{id} should return 400 when firstName is blank","793","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Wed Oct 08 07:43:19 UTC 2025","failed","Wed Oct 08 07:43:20 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that invalid author IDs return 400 Bad Request","290","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/null should return 400 Bad Request","","Wed Oct 08 07:43:11 UTC 2025","passed","Wed Oct 08 07:43:11 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify that books are returned in sequential order by ID","89","checkBooksReturnedInSequentialOrder(SoftAssertions)","","Wed Oct 08 07:43:38 UTC 2025","passed","Wed Oct 08 07:43:38 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Verify that invalid author IDs return 400 Bad Request","347","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/abc should return 400 Bad Request","","Wed Oct 08 07:43:10 UTC 2025","passed","Wed Oct 08 07:43:10 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify author IDs are in sequential order","7","checkAuthorsAreSortedByIdAscending()","","Wed Oct 08 07:43:18 UTC 2025","passed","Wed Oct 08 07:43:18 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify all Author IDs are unique","4","checkAuthorIdsAreUnique()","","Wed Oct 08 07:43:14 UTC 2025","passed","Wed Oct 08 07:43:14 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify that invalid author IDs return 400 Bad Request","318","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/ю should return 400 Bad Request","","Wed Oct 08 07:43:11 UTC 2025","passed","Wed Oct 08 07:43:11 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"Verify GET /Books returns non-empty list and valid fields","1126","checkGetAllBooksShouldReturnValidBooksList()","","Wed Oct 08 07:43:38 UTC 2025","passed","Wed Oct 08 07:43:39 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","305","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/ю → should return 400 Bad Request","","Wed Oct 08 07:43:15 UTC 2025","passed","Wed Oct 08 07:43:16 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify that invalid book IDs return 400 Bad Request","278","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/ю should return 400 Bad Request","","Wed Oct 08 07:43:31 UTC 2025","passed","Wed Oct 08 07:43:31 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that creating a book with identical data twice is allowed and both return the same book data","538","checkUserCanCreateBookWithSameDataTwice(SoftAssertions)","","Wed Oct 08 07:43:28 UTC 2025","passed","Wed Oct 08 07:43:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","307","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/-5 → should return 404 Not Found","","Wed Oct 08 07:43:14 UTC 2025","passed","Wed Oct 08 07:43:14 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","265","checkDeleteWithoutIdShouldReturn405()","","Wed Oct 08 07:43:33 UTC 2025","passed","Wed Oct 08 07:43:33 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","272","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/9999999 → should return 404 for nonexistent book ID","","Wed Oct 08 07:43:13 UTC 2025","failed","Wed Oct 08 07:43:13 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","1604","checkUpdateBookSingleFieldsIndividually()","","Wed Oct 08 07:43:40 UTC 2025","passed","Wed Oct 08 07:43:42 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","727","checkCreateDuplicateAuthorIsAllowed(SoftAssertions)","","Wed Oct 08 07:43:07 UTC 2025","passed","Wed Oct 08 07:43:08 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","309","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/abc → should return 400 Bad Request","","Wed Oct 08 07:43:14 UTC 2025","passed","Wed Oct 08 07:43:15 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","265","checkCreateBookWithSingleField(String) Create Book with only field: id","","Wed Oct 08 07:43:26 UTC 2025","passed","Wed Oct 08 07:43:26 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Authors returns non-empty list and all fields are valid","841","checkGetAllAuthorsShouldReturnValidList()","","Wed Oct 08 07:43:16 UTC 2025","passed","Wed Oct 08 07:43:17 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"PUT /Authors/{id} should return 404 when author does not exist","286","checkShouldReturn404WhenUpdatingNonExistingAuthor()","","Wed Oct 08 07:43:18 UTC 2025","failed","Wed Oct 08 07:43:19 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn404WhenUpdatingNonExistingAuthor"
"Verify each author has a valid first and last name pattern","16","checkAuthorNamesHaveValidPattern()","","Wed Oct 08 07:43:16 UTC 2025","passed","Wed Oct 08 07:43:16 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify deleting a non-existent author returns 404 Not Found","354","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Wed Oct 08 07:43:08 UTC 2025","failed","Wed Oct 08 07:43:08 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify that sending POST /Books without a request body returns 400 Bad Request","309","checkCreateBookWithoutBodyShouldReturnBadRequest(SoftAssertions)","","Wed Oct 08 07:43:30 UTC 2025","passed","Wed Oct 08 07:43:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","267","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Wed Oct 08 07:43:27 UTC 2025","passed","Wed Oct 08 07:43:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that creating author with special characters in names is accepted","299","checkCreateAuthorWithSpecialCharacters(SoftAssertions)","","Wed Oct 08 07:43:04 UTC 2025","passed","Wed Oct 08 07:43:04 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify that user can create an author with all required valid fields","4281","checkUserCanCreateAuthorWithAllFields(SoftAssertions)","","Wed Oct 08 07:43:00 UTC 2025","passed","Wed Oct 08 07:43:04 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","314","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/0 → should return 404 Not Found","","Wed Oct 08 07:43:13 UTC 2025","passed","Wed Oct 08 07:43:14 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Create a book with emoji and unicode characters","272","checkCreateBookWithEmojiAndUnicode(SoftAssertions)","","Wed Oct 08 07:43:25 UTC 2025","passed","Wed Oct 08 07:43:26 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","286","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Wed Oct 08 07:43:36 UTC 2025","passed","Wed Oct 08 07:43:37 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","724","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Wed Oct 08 07:43:22 UTC 2025","failed","Wed Oct 08 07:43:22 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","36","checkBooksPublishDateIsChronologicallyDecreasing()","","Wed Oct 08 07:43:37 UTC 2025","passed","Wed Oct 08 07:43:37 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify updating a book without a request body returns 400 Bad Request","7","checkUpdateBookWithoutBodyShouldReturnBadRequest()","","Wed Oct 08 07:43:42 UTC 2025","broken","Wed Oct 08 07:43:42 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturnBadRequest"
"Verify that creating an author with empty fields returns 400 Bad Request","297","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Wed Oct 08 07:43:05 UTC 2025","failed","Wed Oct 08 07:43:05 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify double deletion returns 404 for the second call","786","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Wed Oct 08 07:43:33 UTC 2025","failed","Wed Oct 08 07:43:34 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","766","checkShouldReturnBadRequestOnIdMismatch()","","Wed Oct 08 07:43:18 UTC 2025","failed","Wed Oct 08 07:43:18 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","876","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Wed Oct 08 07:43:32 UTC 2025","passed","Wed Oct 08 07:43:33 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","292","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/null → should return 400 Bad Request","","Wed Oct 08 07:43:16 UTC 2025","passed","Wed Oct 08 07:43:16 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","281","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Wed Oct 08 07:43:27 UTC 2025","passed","Wed Oct 08 07:43:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating a non-existent book returns 404 Not Found","271","checkUpdateNonExistentBookShouldReturnNotFound()","","Wed Oct 08 07:43:43 UTC 2025","failed","Wed Oct 08 07:43:43 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturnNotFound"
"Verify that creating a book with empty fields returns sucess","283","checkUserCanCreateBookWithNullFields(SoftAssertions)","","Wed Oct 08 07:43:27 UTC 2025","passed","Wed Oct 08 07:43:28 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify creating a Book with only one populated field behaves as expected","273","checkCreateBookWithSingleField(String) Create Book with only field: title","","Wed Oct 08 07:43:26 UTC 2025","passed","Wed Oct 08 07:43:26 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","320","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Wed Oct 08 07:43:38 UTC 2025","passed","Wed Oct 08 07:43:38 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","305","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/$ → should return 400 Bad Request","","Wed Oct 08 07:43:15 UTC 2025","passed","Wed Oct 08 07:43:15 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","292","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Wed Oct 08 07:43:37 UTC 2025","passed","Wed Oct 08 07:43:37 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify creating a Book with only one populated field behaves as expected","261","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Wed Oct 08 07:43:27 UTC 2025","passed","Wed Oct 08 07:43:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","292","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Wed Oct 08 07:43:36 UTC 2025","passed","Wed Oct 08 07:43:36 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","312","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Wed Oct 08 07:43:36 UTC 2025","passed","Wed Oct 08 07:43:36 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","310","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Wed Oct 08 07:43:13 UTC 2025","failed","Wed Oct 08 07:43:13 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","273","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Wed Oct 08 07:43:13 UTC 2025","failed","Wed Oct 08 07:43:13 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturnBadRequest"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","297","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Wed Oct 08 07:43:30 UTC 2025","passed","Wed Oct 08 07:43:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify that user can create an author with minimal valid data","299","checkUserCanCreateAuthorWithMinimalData(SoftAssertions)","","Wed Oct 08 07:43:05 UTC 2025","passed","Wed Oct 08 07:43:05 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Create a book with special characters in all string fields","272","checkCreateBookWithSpecialSymbols(SoftAssertions)","","Wed Oct 08 07:43:28 UTC 2025","passed","Wed Oct 08 07:43:28 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"Verify updating a book with empty strings returns 400 Bad Request","562","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Wed Oct 08 07:43:42 UTC 2025","passed","Wed Oct 08 07:43:43 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","303","checkGetAuthorWithInvalidIdShouldReturnBadRequest(String) GET /Authors/! → should return 400 Bad Request","","Wed Oct 08 07:43:15 UTC 2025","passed","Wed Oct 08 07:43:15 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturnBadRequest"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","284","checkDeleteWithoutIdShouldReturn405()","","Wed Oct 08 07:43:11 UTC 2025","passed","Wed Oct 08 07:43:12 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"PUT /Authors/{id} with non-numeric path should return 400","283","checkShouldReturn400WhenPathIsNonNumeric()","","Wed Oct 08 07:43:25 UTC 2025","passed","Wed Oct 08 07:43:25 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturn400WhenPathIsNonNumeric"
"Verify double deletion returns 404 for the second call","815","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Wed Oct 08 07:43:09 UTC 2025","failed","Wed Oct 08 07:43:10 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"Verify that invalid book IDs return 400 Bad Request","273","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/abc should return 400 Bad Request","","Wed Oct 08 07:43:30 UTC 2025","passed","Wed Oct 08 07:43:31 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Create a book with a title that includes mixed characters","276","checkCreateBookWithMixedCharacters(SoftAssertions)","","Wed Oct 08 07:43:29 UTC 2025","passed","Wed Oct 08 07:43:30 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"GET /Books/{id} should return the correct book for an existing ID","766","checkGetBookByIdShouldReturnValidBook(SoftAssertions)","","Wed Oct 08 07:43:35 UTC 2025","failed","Wed Oct 08 07:43:36 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","292","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Wed Oct 08 07:43:37 UTC 2025","passed","Wed Oct 08 07:43:37 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","466","checkGetAuthorsByBookIdShouldReturnRelatedAuthors(SoftAssertions)","","Wed Oct 08 07:43:16 UTC 2025","passed","Wed Oct 08 07:43:16 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"Verify creating a Book with only one populated field behaves as expected","286","checkCreateBookWithSingleField(String) Create Book with only field: description","","Wed Oct 08 07:43:26 UTC 2025","passed","Wed Oct 08 07:43:27 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","767","checkShouldReturnBadRequestWhenIdBookInvalid()","","Wed Oct 08 07:43:19 UTC 2025","failed","Wed Oct 08 07:43:19 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"PUT /Authors/{id} should return 400 when firstName is blank","760","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Wed Oct 08 07:43:21 UTC 2025","failed","Wed Oct 08 07:43:22 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify that invalid book IDs return 400 Bad Request","274","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/null should return 400 Bad Request","","Wed Oct 08 07:43:31 UTC 2025","passed","Wed Oct 08 07:43:32 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","714","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Wed Oct 08 07:43:22 UTC 2025","failed","Wed Oct 08 07:43:23 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","319","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Wed Oct 08 07:43:38 UTC 2025","passed","Wed Oct 08 07:43:38 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that invalid book IDs return 400 Bad Request","284","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/! should return 400 Bad Request","","Wed Oct 08 07:43:31 UTC 2025","passed","Wed Oct 08 07:43:31 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that creating an author with null fields returns 400 Bad Request","318","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Wed Oct 08 07:43:04 UTC 2025","failed","Wed Oct 08 07:43:05 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Verify deleting a non-existent book returns 404 Not Found","265","checkDeleteNonexistentBookShouldReturnNotFound()","","Wed Oct 08 07:43:33 UTC 2025","failed","Wed Oct 08 07:43:33 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","307","checkGetBookByRandomIdShouldReturnValidBookById(SoftAssertions)","","Wed Oct 08 07:43:39 UTC 2025","failed","Wed Oct 08 07:43:40 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","437","checkCreateBookWithPastPublishDate(SoftAssertions)","","Wed Oct 08 07:43:25 UTC 2025","passed","Wed Oct 08 07:43:25 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Create a book with numeric-only title and description","282","checkCreateBookWithNumericStrings(SoftAssertions)","","Wed Oct 08 07:43:29 UTC 2025","passed","Wed Oct 08 07:43:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","314","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Wed Oct 08 07:43:37 UTC 2025","passed","Wed Oct 08 07:43:38 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","269","checkUserCanCreateBookWithEmptyFieldsExceptDate(SoftAssertions)","","Wed Oct 08 07:43:29 UTC 2025","passed","Wed Oct 08 07:43:29 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","841","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Wed Oct 08 07:43:08 UTC 2025","failed","Wed Oct 08 07:43:09 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify creating author with only one populated field behaves as expected","292","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Wed Oct 08 07:43:06 UTC 2025","passed","Wed Oct 08 07:43:06 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that POST /Authors without body returns 400 Bad Request","995","checkCreateAuthorWithoutBodyShouldReturnBadRequest(SoftAssertions)","","Wed Oct 08 07:43:06 UTC 2025","passed","Wed Oct 08 07:43:07 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturnBadRequest"
"Verify updating an existing book successfully changes its fields and returns 200 OK","540","checkUpdateExistingBookShouldReturnOk(SoftAssertions)","","Wed Oct 08 07:43:40 UTC 2025","passed","Wed Oct 08 07:43:40 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturnOk"
"Verify updating a book with null fields returns 400 Bad Request","538","checkUpdateBookWithNullFieldsShouldReturnBadRequest()","","Wed Oct 08 07:43:42 UTC 2025","failed","Wed Oct 08 07:43:42 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturnBadRequest"
"Verify that a user can create a book with all required fields and they are correctly returned","277","checkUserCanCreateBookWithAllFields(SoftAssertions)","","Wed Oct 08 07:43:26 UTC 2025","passed","Wed Oct 08 07:43:26 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Verify that invalid book IDs return 400 Bad Request","274","checkDeleteInvalidBookIdShouldReturnBadRequest(String) DELETE /Books/$ should return 400 Bad Request","","Wed Oct 08 07:43:31 UTC 2025","passed","Wed Oct 08 07:43:31 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","284","checkDeleteInvalidAuthorIdShouldReturnBadRequest(String) DELETE /Authors/! should return 400 Bad Request","","Wed Oct 08 07:43:10 UTC 2025","passed","Wed Oct 08 07:43:11 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when lastName is blank","705","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Wed Oct 08 07:43:23 UTC 2025","failed","Wed Oct 08 07:43:24 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","302","checkGetAuthorWithNonexistentIdShouldReturnBadRequest(String) GET /Authors/999999 → should return 404 Not Found","","Wed Oct 08 07:43:14 UTC 2025","passed","Wed Oct 08 07:43:14 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturnBadRequest"
"Verify creating author with only one populated field behaves as expected","289","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Wed Oct 08 07:43:06 UTC 2025","passed","Wed Oct 08 07:43:06 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify PUT /Authors/{id} updates an existing author successfully","709","checkShouldUpdateExistingAuthor(SoftAssertions)","","Wed Oct 08 07:43:24 UTC 2025","passed","Wed Oct 08 07:43:25 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldUpdateExistingAuthor"
"Verify that all book IDs are unique across the list","2","checkReturnedBookIdsAreUnique()","","Wed Oct 08 07:43:36 UTC 2025","passed","Wed Oct 08 07:43:36 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify that creating a book with empty all fields returns 400 Bad Request","314","checkUserCanCreateBookWithEmptyFields()","","Wed Oct 08 07:43:28 UTC 2025","passed","Wed Oct 08 07:43:28 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
