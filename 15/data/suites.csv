"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"Verify GET /Books/{id} returns the correct book when using a valid random ID","622","checkGetBookByRandomIdShouldReturnValidBookById()","","Tue Oct 07 11:49:15 UTC 2025","passed","Tue Oct 07 11:49:16 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByRandomIdShouldReturnValidBookById"
"PUT /Authors/{id} should return 400 when body ID mismatches path ID","758","checkShouldReturnBadRequestOnIdMismatch()","","Tue Oct 07 11:48:51 UTC 2025","failed","Tue Oct 07 11:48:52 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestOnIdMismatch"
"Verify that deleting an existing author returns 200 OK and subsequent GET returns 404 Not Found","916","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone()","","Tue Oct 07 11:48:42 UTC 2025","failed","Tue Oct 07 11:48:43 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteExistingAuthorShouldReturnOkAndAuthorShouldBeGone"
"Verify creating author with only one populated field behaves as expected","299","checkCreateAuthorWithSingleField(String) Create author with single field: lastName","","Tue Oct 07 11:48:39 UTC 2025","passed","Tue Oct 07 11:48:40 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that creating a book with identical data twice is allowed and both return the same book data","563","checkUserCanCreateBookWithSameDataTwice()","","Tue Oct 07 11:49:03 UTC 2025","passed","Tue Oct 07 11:49:03 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithSameDataTwice"
"Create a book with a title that includes mixed characters","294","checkCreateBookWithMixedCharacters()","","Tue Oct 07 11:49:04 UTC 2025","passed","Tue Oct 07 11:49:04 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithMixedCharacters"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","290","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/$ → should return 400 Bad Request","","Tue Oct 07 11:48:49 UTC 2025","passed","Tue Oct 07 11:48:49 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify that creating a book with empty all fields returns 400 Bad Request","320","checkUserCanCreateBookWithEmptyFields()","","Tue Oct 07 11:49:02 UTC 2025","passed","Tue Oct 07 11:49:02 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFields"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","299","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/999999 → should return 404 for nonexistent book ID","","Tue Oct 07 11:48:47 UTC 2025","failed","Tue Oct 07 11:48:47 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404"
"Verify that invalid book IDs return 400 Bad Request","298","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/! should return 400 Bad Request","","Tue Oct 07 11:49:06 UTC 2025","passed","Tue Oct 07 11:49:07 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify GET /Authors/authors/books/{idBook} returns authors related to that book","331","checkGetAuthorsByBookIdShouldReturnRelatedAuthors()","","Tue Oct 07 11:48:47 UTC 2025","passed","Tue Oct 07 11:48:48 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByBookIdShouldReturnRelatedAuthors"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","295","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/abc → should return 400 Bad Request","","Tue Oct 07 11:48:48 UTC 2025","passed","Tue Oct 07 11:48:48 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify that each next book has an earlier publish date than the previous one (newest to oldest order)","26","checkBooksPublishDateIsChronologicallyDecreasing()","","Tue Oct 07 11:49:12 UTC 2025","passed","Tue Oct 07 11:49:12 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksPublishDateIsChronologicallyDecreasing"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","324","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/-5 → should return 404 Not Found","","Tue Oct 07 11:48:50 UTC 2025","passed","Tue Oct 07 11:48:50 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404"
"Verify that invalid book IDs return 400 Bad Request","296","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/ю should return 400 Bad Request","","Tue Oct 07 11:49:07 UTC 2025","passed","Tue Oct 07 11:49:07 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify creating a Book with only one populated field behaves as expected","346","checkCreateBookWithSingleField(String) Create Book with only field: excerpt","","Tue Oct 07 11:49:01 UTC 2025","passed","Tue Oct 07 11:49:01 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify updating a book with empty strings returns 400 Bad Request","554","checkUpdateBookWithEmptyFieldsShouldReturn400()","","Tue Oct 07 11:49:18 UTC 2025","passed","Tue Oct 07 11:49:18 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithEmptyFieldsShouldReturn400"
"Verify GET /Authors returns non-empty list and all fields are valid","522","checkGetAllAuthorsShouldReturnValidList()","","Tue Oct 07 11:48:48 UTC 2025","passed","Tue Oct 07 11:48:48 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAllAuthorsShouldReturnValidList"
"Verify that creating a book with empty fields except 'publishDate' returns 400 Bad Request","283","checkUserCanCreateBookWithEmptyFieldsExceptDate()","","Tue Oct 07 11:49:03 UTC 2025","passed","Tue Oct 07 11:49:03 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithEmptyFieldsExceptDate"
"Verify creating a Book with only one populated field behaves as expected","275","checkCreateBookWithSingleField(String) Create Book with only field: publishDate","","Tue Oct 07 11:49:01 UTC 2025","passed","Tue Oct 07 11:49:02 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify that creating duplicate authors is allowed and returns same data (fake API behavior)","660","checkCreateDuplicateAuthorIsAllowed()","","Tue Oct 07 11:48:40 UTC 2025","passed","Tue Oct 07 11:48:41 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateDuplicateAuthorIsAllowed"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","302","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/ю should return 400 Bad Request","","Tue Oct 07 11:49:11 UTC 2025","passed","Tue Oct 07 11:49:12 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","725","checkShouldReturnBadRequestWhenFirstNameBlank(String) [2]  ","","Tue Oct 07 11:48:54 UTC 2025","failed","Tue Oct 07 11:48:55 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","916","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/0 should return 404 Not Found","","Tue Oct 07 11:49:12 UTC 2025","passed","Tue Oct 07 11:49:13 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify deleting a non-existent book returns 404 Not Found","295","checkDeleteNonexistentBookShouldReturnNotFound()","","Tue Oct 07 11:49:07 UTC 2025","failed","Tue Oct 07 11:49:08 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteNonexistentBookShouldReturnNotFound"
"Verify that invalid book IDs return 400 Bad Request","289","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/abc should return 400 Bad Request","","Tue Oct 07 11:49:06 UTC 2025","passed","Tue Oct 07 11:49:06 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify that user can create an author with minimal valid data","313","checkUserCanCreateAuthorWithMinimalData()","","Tue Oct 07 11:48:39 UTC 2025","passed","Tue Oct 07 11:48:39 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithMinimalData"
"Create a book with numeric-only title and description","292","checkCreateBookWithNumericStrings()","","Tue Oct 07 11:49:03 UTC 2025","passed","Tue Oct 07 11:49:04 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithNumericStrings"
"PUT /Authors/{id} should return 400 when lastName is blank","734","checkShouldReturnBadRequestWhenLastNameBlank(String) [3] 
","","Tue Oct 07 11:48:57 UTC 2025","failed","Tue Oct 07 11:48:58 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating an author with empty fields returns 400 Bad Request","309","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest()","","Tue Oct 07 11:48:39 UTC 2025","failed","Tue Oct 07 11:48:39 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithEmptyFieldsShouldReturnBadRequest"
"Verify that creating author with special characters in names is accepted","319","checkCreateAuthorWithSpecialCharacters()","","Tue Oct 07 11:48:38 UTC 2025","passed","Tue Oct 07 11:48:38 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSpecialCharacters"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","303","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/0 → should return 404 for nonexistent book ID","","Tue Oct 07 11:48:46 UTC 2025","failed","Tue Oct 07 11:48:47 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404"
"Create a book with special characters in all string fields","289","checkCreateBookWithSpecialSymbols()","","Tue Oct 07 11:49:02 UTC 2025","passed","Tue Oct 07 11:49:03 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSpecialSymbols"
"Verify that user can create an author with all required valid fields","2948","checkUserCanCreateAuthorWithAllFields()","","Tue Oct 07 11:48:35 UTC 2025","passed","Tue Oct 07 11:48:38 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkUserCanCreateAuthorWithAllFields"
"Verify all Author IDs are unique","4","checkAuthorIdsAreUnique()","","Tue Oct 07 11:48:47 UTC 2025","passed","Tue Oct 07 11:48:47 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorIdsAreUnique"
"Verify GET /Authors/authors/books/{idBook} returns 404 for invalid or missing books","300","checkGetAuthorsByNonexistentBookIdShouldReturn404(String) GET /Authors/authors/books/-1 → should return 404 for nonexistent book ID","","Tue Oct 07 11:48:47 UTC 2025","failed","Tue Oct 07 11:48:47 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorsByNonexistentBookIdShouldReturn404"
"Verify creating author with only one populated field behaves as expected","282","checkCreateAuthorWithSingleField(String) Create author with single field: idBook","","Tue Oct 07 11:48:40 UTC 2025","passed","Tue Oct 07 11:48:40 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","296","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/null → should return 400 Bad Request","","Tue Oct 07 11:48:49 UTC 2025","passed","Tue Oct 07 11:48:50 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","310","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/! should return 400 Bad Request","","Tue Oct 07 11:49:12 UTC 2025","passed","Tue Oct 07 11:49:12 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","325","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/abc should return 400 Bad Request","","Tue Oct 07 11:48:44 UTC 2025","passed","Tue Oct 07 11:48:44 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"GET /Books/{id} should return the correct book for an existing ID","957","checkGetBookByIdShouldReturnValidBook()","","Tue Oct 07 11:49:10 UTC 2025","failed","Tue Oct 07 11:49:11 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookByIdShouldReturnValidBook"
"Verify that creating a book with empty fields returns sucess","289","checkUserCanCreateBookWithNullFields()","","Tue Oct 07 11:49:02 UTC 2025","passed","Tue Oct 07 11:49:02 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithNullFields"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","309","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/-5 should return 404 Not Found","","Tue Oct 07 11:49:14 UTC 2025","passed","Tue Oct 07 11:49:14 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify updating an existing book successfully changes its fields and returns 200 OK","567","checkUpdateExistingBookShouldReturn200()","","Tue Oct 07 11:49:19 UTC 2025","passed","Tue Oct 07 11:49:19 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateExistingBookShouldReturn200"
"Verify author IDs are in sequential order","6","checkAuthorsAreSortedByIdAscending()","","Tue Oct 07 11:48:50 UTC 2025","passed","Tue Oct 07 11:48:50 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorsAreSortedByIdAscending"
"Verify double deletion returns 404 for the second call","898","checkDeleteBookTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 11:49:08 UTC 2025","failed","Tue Oct 07 11:49:09 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteBookTwiceShouldReturnNotFoundSecondTime"
"PUT /Authors/{id} with non-numeric path should return 400","658","shouldReturn400WhenPathIsNonNumeric()","","Tue Oct 07 11:48:58 UTC 2025","passed","Tue Oct 07 11:48:58 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn400WhenPathIsNonNumeric"
"Verify deleting a non-existent author returns 404 Not Found","309","checkDeleteNonexistentAuthorShouldReturnNotFound()","","Tue Oct 07 11:48:42 UTC 2025","failed","Tue Oct 07 11:48:42 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteNonexistentAuthorShouldReturnNotFound"
"Verify that a user can create a book with all required fields and they are correctly returned","305","checkUserCanCreateBookWithAllFields()","","Tue Oct 07 11:48:59 UTC 2025","passed","Tue Oct 07 11:49:00 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkUserCanCreateBookWithAllFields"
"Verify that sending POST /Books without a request body returns 400 Bad Request","393","checkCreateBookWithoutBodyShouldReturnBadRequest()","","Tue Oct 07 11:49:04 UTC 2025","passed","Tue Oct 07 11:49:04 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithoutBodyShouldReturnBadRequest"
"Verify updating a book with null fields returns 400 Bad Request","561","checkUpdateBookWithNullFieldsShouldReturn400()","","Tue Oct 07 11:49:16 UTC 2025","failed","Tue Oct 07 11:49:16 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithNullFieldsShouldReturn400"
"Verify that invalid author IDs return 400 Bad Request","301","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/null should return 400 Bad Request","","Tue Oct 07 11:48:45 UTC 2025","passed","Tue Oct 07 11:48:45 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"PUT /Authors/{id} should return 400 when lastName is blank","710","checkShouldReturnBadRequestWhenLastNameBlank(String) [2]  ","","Tue Oct 07 11:48:56 UTC 2025","failed","Tue Oct 07 11:48:57 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify DELETE /Authors without specifying ID returns 405 Method Not Allowed","292","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 11:48:45 UTC 2025","broken","Tue Oct 07 11:48:46 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteWithoutIdShouldReturn405"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","319","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/999999 → should return 404 Not Found","","Tue Oct 07 11:48:50 UTC 2025","passed","Tue Oct 07 11:48:51 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404"
"Verify that creating a book with invalid or empty publishDate returns 400 Bad Request and correct validation error","332","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest()","","Tue Oct 07 11:49:04 UTC 2025","passed","Tue Oct 07 11:49:05 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmptyPublishDateShouldReturnBadRequest"
"Verify that deleting an existing book returns 204 No Content and subsequent GET returns 404 Not Found","1217","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone()","","Tue Oct 07 11:49:05 UTC 2025","passed","Tue Oct 07 11:49:06 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteExistingBookShouldReturnOkAndBookShouldBeGone"
"Verify that invalid book IDs return 400 Bad Request","306","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/$ should return 400 Bad Request","","Tue Oct 07 11:49:07 UTC 2025","passed","Tue Oct 07 11:49:07 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify DELETE /Books without specifying ID returns 405 Method Not Allowed","276","checkDeleteWithoutIdShouldReturn405()","","Tue Oct 07 11:49:08 UTC 2025","broken","Tue Oct 07 11:49:08 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteWithoutIdShouldReturn405"
"Verify that POST /Authors without body returns 400 Bad Request","813","checkCreateAuthorWithoutBodyShouldReturn400()","","Tue Oct 07 11:48:41 UTC 2025","passed","Tue Oct 07 11:48:42 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithoutBodyShouldReturn400"
"Verify each author has a valid first and last name pattern","22","checkAuthorNamesHaveValidPattern()","","Tue Oct 07 11:48:47 UTC 2025","passed","Tue Oct 07 11:48:47 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkAuthorNamesHaveValidPattern"
"Verify updating a non-existent book returns 404 Not Found","277","checkUpdateNonExistentBookShouldReturn404()","","Tue Oct 07 11:49:18 UTC 2025","failed","Tue Oct 07 11:49:19 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateNonExistentBookShouldReturn404"
"Verify updating a book without a request body returns 400 Bad Request","298","checkUpdateBookWithoutBodyShouldReturn400()","","Tue Oct 07 11:49:19 UTC 2025","passed","Tue Oct 07 11:49:20 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookWithoutBodyShouldReturn400"
"Verify GET /Books returns non-empty list and valid fields","818","checkGetAllBooksShouldReturnValidBooksList()","","Tue Oct 07 11:49:14 UTC 2025","passed","Tue Oct 07 11:49:15 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetAllBooksShouldReturnValidBooksList"
"Verify GET /Authors/{id} returns correct author by valid ID","313","checkGetAuthorByIdShouldReturnCorrectAuthor()","","Tue Oct 07 11:48:50 UTC 2025","passed","Tue Oct 07 11:48:50 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorByIdShouldReturnCorrectAuthor"
"Verify that invalid author IDs return 400 Bad Request","321","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/! should return 400 Bad Request","","Tue Oct 07 11:48:44 UTC 2025","passed","Tue Oct 07 11:48:44 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"PUT /Authors/{id} should return 400 when firstName is blank","735","checkShouldReturnBadRequestWhenFirstNameBlank(String) [1] ","","Tue Oct 07 11:48:53 UTC 2025","failed","Tue Oct 07 11:48:54 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Create a book with emoji and unicode characters","298","checkCreateBookWithEmojiAndUnicode()","","Tue Oct 07 11:48:59 UTC 2025","passed","Tue Oct 07 11:48:59 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithEmojiAndUnicode"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","293","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/! → should return 400 Bad Request","","Tue Oct 07 11:48:48 UTC 2025","passed","Tue Oct 07 11:48:49 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify creating a Book with only one populated field behaves as expected","297","checkCreateBookWithSingleField(String) Create Book with only field: id","","Tue Oct 07 11:49:00 UTC 2025","passed","Tue Oct 07 11:49:00 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify creating author with only one populated field behaves as expected","303","checkCreateAuthorWithSingleField(String) Create author with single field: firstName","","Tue Oct 07 11:48:39 UTC 2025","passed","Tue Oct 07 11:48:39 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithSingleField"
"Verify that books are returned in sequential order by ID","6","checkBooksReturnedInSequentialOrder()","","Tue Oct 07 11:49:14 UTC 2025","passed","Tue Oct 07 11:49:14 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkBooksReturnedInSequentialOrder"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","311","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/$ should return 400 Bad Request","","Tue Oct 07 11:49:12 UTC 2025","passed","Tue Oct 07 11:49:12 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"Verify that invalid author IDs return 400 Bad Request","305","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/$ should return 400 Bad Request","","Tue Oct 07 11:48:44 UTC 2025","passed","Tue Oct 07 11:48:45 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"Verify creating a Book with only one populated field behaves as expected","310","checkCreateBookWithSingleField(String) Create Book with only field: description","","Tue Oct 07 11:49:00 UTC 2025","passed","Tue Oct 07 11:49:00 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify double deletion returns 404 for the second call","876","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime()","","Tue Oct 07 11:48:43 UTC 2025","failed","Tue Oct 07 11:48:44 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteAuthorTwiceShouldReturnNotFoundSecondTime"
"Verify creating a Book with only one populated field behaves as expected","589","checkCreateBookWithSingleField(String) Create Book with only field: pageCount","","Tue Oct 07 11:49:00 UTC 2025","passed","Tue Oct 07 11:49:01 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"PUT /Authors/{id} should return 400 when lastName is blank","707","checkShouldReturnBadRequestWhenLastNameBlank(String) [1] ","","Tue Oct 07 11:48:56 UTC 2025","failed","Tue Oct 07 11:48:56 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenLastNameBlank"
"Verify that creating a book with a past publish date is allowed and the date is stored correctly","506","checkCreateBookWithPastPublishDate()","","Tue Oct 07 11:48:58 UTC 2025","passed","Tue Oct 07 11:48:59 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithPastPublishDate"
"Verify that invalid author IDs return 400 Bad Request","301","checkDeleteInvalidAuthorIdShouldReturn400(String) DELETE /Authors/ю should return 400 Bad Request","","Tue Oct 07 11:48:45 UTC 2025","passed","Tue Oct 07 11:48:45 UTC 2025","","com.fakeRestApi.tests.author.DeleteAuthorsTests","com.fakeRestApi.tests.author.DeleteAuthorsTests","checkDeleteInvalidAuthorIdShouldReturn400"
"Verify PUT /Authors/{id} updates an existing author successfully","791","shouldUpdateExistingAuthor()","","Tue Oct 07 11:48:52 UTC 2025","passed","Tue Oct 07 11:48:52 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldUpdateExistingAuthor"
"Verify updating each single field one by one (title, description, pageCount, excerpt, publishDate)","1715","checkUpdateBookSingleFieldsIndividually()","","Tue Oct 07 11:49:16 UTC 2025","passed","Tue Oct 07 11:49:18 UTC 2025","","com.fakeRestApi.tests.book.UpdateBooksTests","com.fakeRestApi.tests.book.UpdateBooksTests","checkUpdateBookSingleFieldsIndividually"
"PUT /Authors/{id} should return 400 when idBook = 0 (invalid reference)","738","checkShouldReturnBadRequestWhenIdBookInvalid()","","Tue Oct 07 11:48:52 UTC 2025","failed","Tue Oct 07 11:48:53 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenIdBookInvalid"
"PUT /Authors/{id} should return 404 when author does not exist","291","shouldReturn404WhenUpdatingNonExistingAuthor()","","Tue Oct 07 11:48:55 UTC 2025","failed","Tue Oct 07 11:48:56 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","shouldReturn404WhenUpdatingNonExistingAuthor"
"Verify GET /Books/{id} returns 404 Not Found for nonexistent or invalid numeric IDs","562","checkGetBookWithNonexistentIdShouldReturnNotFound(String) GET /Books/999999999 should return 404 Not Found","","Tue Oct 07 11:49:13 UTC 2025","passed","Tue Oct 07 11:49:14 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithNonexistentIdShouldReturnNotFound"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","304","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/abc should return 400 Bad Request","","Tue Oct 07 11:49:11 UTC 2025","passed","Tue Oct 07 11:49:11 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
"PUT /Authors/{id} should return 400 when firstName is blank","735","checkShouldReturnBadRequestWhenFirstNameBlank(String) [3] 	","","Tue Oct 07 11:48:55 UTC 2025","failed","Tue Oct 07 11:48:55 UTC 2025","","com.fakeRestApi.tests.author.UpdateAuthorsTests","com.fakeRestApi.tests.author.UpdateAuthorsTests","checkShouldReturnBadRequestWhenFirstNameBlank"
"Verify GET /Authors/{id} returns 404 Not Found for nonexistent IDs","307","checkGetAuthorWithNonexistentIdShouldReturn404(String) GET /Authors/0 → should return 404 Not Found","","Tue Oct 07 11:48:50 UTC 2025","passed","Tue Oct 07 11:48:50 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithNonexistentIdShouldReturn404"
"Verify that invalid book IDs return 400 Bad Request","284","checkDeleteInvalidBookIdShouldReturn400(String) DELETE /Books/null should return 400 Bad Request","","Tue Oct 07 11:49:07 UTC 2025","passed","Tue Oct 07 11:49:07 UTC 2025","","com.fakeRestApi.tests.book.DeleteBooksTests","com.fakeRestApi.tests.book.DeleteBooksTests","checkDeleteInvalidBookIdShouldReturn400"
"Verify that creating an author with null fields returns 400 Bad Request","313","checkCreateAuthorWithNullFieldsShouldReturnBadRequest()","","Tue Oct 07 11:48:38 UTC 2025","failed","Tue Oct 07 11:48:39 UTC 2025","","com.fakeRestApi.tests.author.CreateAuthorsTests","com.fakeRestApi.tests.author.CreateAuthorsTests","checkCreateAuthorWithNullFieldsShouldReturnBadRequest"
"Verify that all book IDs are unique across the list","2","checkReturnedBookIdsAreUnique()","","Tue Oct 07 11:49:11 UTC 2025","passed","Tue Oct 07 11:49:11 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkReturnedBookIdsAreUnique"
"Verify creating a Book with only one populated field behaves as expected","293","checkCreateBookWithSingleField(String) Create Book with only field: title","","Tue Oct 07 11:49:00 UTC 2025","passed","Tue Oct 07 11:49:00 UTC 2025","","com.fakeRestApi.tests.book.CreateBooksTests","com.fakeRestApi.tests.book.CreateBooksTests","checkCreateBookWithSingleField"
"Verify GET /Authors/{id} returns 400 Bad Request for malformed IDs","309","checkGetAuthorWithInvalidIdShouldReturn400(String) GET /Authors/ю → should return 400 Bad Request","","Tue Oct 07 11:48:49 UTC 2025","passed","Tue Oct 07 11:48:49 UTC 2025","","com.fakeRestApi.tests.author.GetAuthorsTests","com.fakeRestApi.tests.author.GetAuthorsTests","checkGetAuthorWithInvalidIdShouldReturn400"
"Verify GET /Books/{id} returns 400 Bad Request when ID is invalid","304","checkGetBookWithInvalidIdShouldReturnBadRequest(String) GET /Books/null should return 400 Bad Request","","Tue Oct 07 11:49:11 UTC 2025","passed","Tue Oct 07 11:49:11 UTC 2025","","com.fakeRestApi.tests.book.GetBooksApiTests","com.fakeRestApi.tests.book.GetBooksApiTests","checkGetBookWithInvalidIdShouldReturnBadRequest"
